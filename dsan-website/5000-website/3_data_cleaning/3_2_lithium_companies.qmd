---
title: "Lithium Companies Stocks"
format: html
---

```{css, echo = FALSE}
.justify {
    text-align: justify !important;
    text-indent: 20px; 
}

.epigrafe {
    text-align: justify !important;
    text-indent: 20px; 
    border: 1.5px solid #87c8b5; 
    padding-top: 15px;
    padding-bottom: 5px;
    padding-right: 15px;
    padding-left: 15px;
    font-size: 14px;
    background-color: #f9f9f9; 
    margin: 20px 0px 30px 0px;
}
```

``` {r}
#| echo: false
#| message: false
#| code-fold: true
#| code-summary: "Libraries"
#| results: 'hide'
#| warning: false

library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(gridExtra)
library(readxl)
library(imputeTS)
library(zoo)
library(knitr)
library(kableExtra)
library(patchwork)
library(vars)
library(dplyr)

```


``` {r}
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: "Function Fill in NAs Stock Data"

stocks_NAs <- function(data_frame){

    symbol <- max(data_frame$symbol)

    # Select relevant columns
    data_frame <- data.frame(data_frame$date, data_frame$adjusted)

    # Rename columsn
    names(data_frame) <- c("date", "adjusted")

    # Create a sequence of dates from start_date to end_date
    start_date <- as.Date(min(data_frame$date))  
    end_date <- as.Date(max(data_frame$date))

    # Create data range
    date_range <- seq(start_date, end_date, by = "1 day")

    # Create a dataset with the date range
    date_dataset <- data.frame(Date = date_range)

    # Merge dataframes
    data_frame <- merge(data_frame, date_dataset, by.x = "date", by.y = "Date", all = TRUE)

    # Extract rows with missing values
    df_na_rows <- data_frame[which(rowSums(is.na(data_frame)) > 0),]

    # Extract columns with missing values
    df_na_cols <- data_frame[, which(colSums(is.na(data_frame)) > 0)]

    # Modify data
    imputed_time_series <- na_ma(data_frame, k = 4, weighting = "exponential")

    # Add modified data
    data_frame <- data.frame(imputed_time_series)

    # Change data type
    data_frame$date <- as.Date(data_frame$date,format = "%m/%d/%y")

    names(data_frame) <- c("date", symbol)

    return(data_frame)
}
```

``` {r}
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: "Function Merge Dataframs"

merge_dataframes <- function(dataframes_list) {
  # Perform inner join using the first data frame as the base
  df_complete <- dataframes_list[[1]]
  
  # Iterate over the remaining data frames and merge
  for (i in 2:length(dataframes_list)) {
    df_complete <- merge(df_complete, dataframes_list[[i]], by = "date", all.x = TRUE)
  }
  
  return(df_complete)
}
```

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Data Gathering"
#| warning: false

df_list <- list()

start <- "2000-01-01"
end <- "2022-12-31"

tickers_Lithium <- c("ALB", "SQM", "MALRY", "LTHM", "SGML", "GNENF", "PILBF")
tickers_EV <- c("TSLA", "F", "LI", "ON", "RIVN", "XPEV", "LVWR", "AEHR")

tickers <- append(tickers_Lithium, tickers_EV)

for(i in tickers){
    df <- tq_get(i, get = "stock.prices", from = start, to = end)

    df <- stocks_NAs(df)

    df_list <- append(df_list, list(df))
}
```

**Cleaned Data:**

``` {r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: "Data Cleaning"

# Merge datasets
df_companies <- merge_dataframes(df_list)

# Show dataframe
knitr::kable(tail(df_companies, 10))
```

<br>

**Summary:**

``` {r}
#| echo: false
#| message: false
#| warning: false

summary(df_companies)
```

<br>

**Dimensions:**

``` {r}
#| echo: false
#| message: false
#| warning: false

dim(df_companies)
```

``` {r}
#| echo: false
#| message: false
#| warning: false

# Save dataframe as a new file
write.csv(df_companies, '../../../data/01-modified-data/clean_lithium-companies.csv', row.names = FALSE)
```