{
  "hash": "a2447b988ede34bc9a42572b0bb96ad8",
  "result": {
    "markdown": "---\ntitle: \"Lithium News\"\nformat: html\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Libraries\"}\nfrom datetime import date\nfrom datetime import date, timedelta\nfrom newsapi.newsapi_client import NewsApiClient\nimport pandas as pd\n\nimport json\nfrom ibm_watson import NaturalLanguageUnderstandingV1\nfrom ibm_cloud_sdk_core.authenticators import IAMAuthenticator\nfrom ibm_watson.natural_language_understanding_v1 import Features, SentimentOptions\n\nimport os\n```\n:::\n\n\n### News API\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code\"}\ndate = date.today()\ndate_past = date - timedelta(days=20)\n\nf = open('../auth.k','r', encoding=\"utf-8\")\nak = f.readlines()\nf.close()\n\nnewsapi = NewsApiClient(api_key=ak[0])\n\nsources = newsapi.get_sources()\n\nsources = pd.DataFrame(sources['sources'])\n\nsources = sources[(sources['language'] == 'en') & (sources['country'] == 'us') & ~sources['category'].isin(['sports', 'entertainment', 'health'])]\n\nsources.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>name</th>\n      <th>description</th>\n      <th>url</th>\n      <th>category</th>\n      <th>language</th>\n      <th>country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>abc-news</td>\n      <td>ABC News</td>\n      <td>Your trusted source for breaking news, analysi...</td>\n      <td>https://abcnews.go.com</td>\n      <td>general</td>\n      <td>en</td>\n      <td>us</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>al-jazeera-english</td>\n      <td>Al Jazeera English</td>\n      <td>News, analysis from the Middle East and worldw...</td>\n      <td>http://www.aljazeera.com</td>\n      <td>general</td>\n      <td>en</td>\n      <td>us</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>ars-technica</td>\n      <td>Ars Technica</td>\n      <td>The PC enthusiast's resource. Power users and ...</td>\n      <td>http://arstechnica.com</td>\n      <td>technology</td>\n      <td>en</td>\n      <td>us</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>associated-press</td>\n      <td>Associated Press</td>\n      <td>The AP delivers in-depth coverage on the inter...</td>\n      <td>https://apnews.com/</td>\n      <td>general</td>\n      <td>en</td>\n      <td>us</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>axios</td>\n      <td>Axios</td>\n      <td>Axios are a new media company delivering vital...</td>\n      <td>https://www.axios.com</td>\n      <td>general</td>\n      <td>en</td>\n      <td>us</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code\"}\ndf_sources = ', '.join(sources['id'].astype(str))\n\ndf_domains = ', '.join(sources['url'].astype(str))\n\nall_articles = newsapi.get_everything(q='lithium',\n                                      sources=str(df_sources),\n                                      domains=str(df_domains),\n                                      from_param=date_past,\n                                      to=date,\n                                      language='en',\n                                      sort_by='relevancy')\n\ndf_articles = pd.DataFrame(all_articles['articles'])\n\n\ndf_articles[['id', 'name']] = df_articles['source'].apply(lambda x: pd.Series([x['id'], x['name']]))\n\ndf_articles_save = pd.DataFrame(df_articles, columns=[\n                                                'id', \n                                                'name', \n                                                'author', \n                                                'title',\n                                                'description',\n                                                'url',\n                                                'urlToImage', \n                                                'content', \n                                                'publishedAt'])\n\ndf_articles.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>source</th>\n      <th>author</th>\n      <th>title</th>\n      <th>description</th>\n      <th>url</th>\n      <th>urlToImage</th>\n      <th>publishedAt</th>\n      <th>content</th>\n      <th>id</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>{'id': 'the-verge', 'name': 'The Verge'}</td>\n      <td>Andrew J. Hawkins</td>\n      <td>Redwood Materials will recycle stationary stor...</td>\n      <td>Redwood Materials is recycling a 4MWh energy s...</td>\n      <td>https://www.theverge.com/2023/11/7/23949188/re...</td>\n      <td>https://cdn.vox-cdn.com/thumbor/hqCI-2cI_EHKDl...</td>\n      <td>2023-11-07T14:00:00Z</td>\n      <td>Redwood Materials will recycle stationary stor...</td>\n      <td>the-verge</td>\n      <td>The Verge</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>{'id': 'ars-technica', 'name': 'Ars Technica'}</td>\n      <td>Jonathan M. Gitlin</td>\n      <td>A giant battery gives this new school bus a 30...</td>\n      <td>The Type-D school bus uses a 387 kWh lithium i...</td>\n      <td>https://arstechnica.com/cars/2023/10/this-elec...</td>\n      <td>https://cdn.arstechnica.net/wp-content/uploads...</td>\n      <td>2023-10-31T11:00:53Z</td>\n      <td>Enlarge/ GreenPower has given its class-D elec...</td>\n      <td>ars-technica</td>\n      <td>Ars Technica</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>{'id': 'ars-technica', 'name': 'Ars Technica'}</td>\n      <td>Jonathan M. Gitlin</td>\n      <td>A lithium mine for EV batteries is coming to A...</td>\n      <td>With EV incentives tied to domestic battery co...</td>\n      <td>https://arstechnica.com/cars/2023/11/exxon-wil...</td>\n      <td>https://cdn.arstechnica.net/wp-content/uploads...</td>\n      <td>2023-11-13T18:59:10Z</td>\n      <td>Enlarge/ These are piles of lithium harvested ...</td>\n      <td>ars-technica</td>\n      <td>Ars Technica</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>{'id': 'business-insider', 'name': 'Business I...</td>\n      <td>Tim Levin</td>\n      <td>Big Oil wants to become Big EV</td>\n      <td>Heavyweights of the combustion-car era like Sh...</td>\n      <td>https://www.businessinsider.com/big-oil-wants-...</td>\n      <td>https://i.insider.com/65451ccc36d588dc55ca51ee...</td>\n      <td>2023-11-03T16:37:44Z</td>\n      <td>BP's EV charging arm has bought $100 million w...</td>\n      <td>business-insider</td>\n      <td>Business Insider</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>{'id': 'time', 'name': 'Time'}</td>\n      <td>Siobhan Wagner / Bloomberg</td>\n      <td>Battery Recycler Among Winners of Prince Willi...</td>\n      <td>A lithium-ion battery recycler and a program t...</td>\n      <td>https://time.com/6332319/battery-recycler-prin...</td>\n      <td>https://api.time.com/wp-content/uploads/2023/1...</td>\n      <td>2023-11-07T14:41:00Z</td>\n      <td>A lithium-ion battery recycler and a program t...</td>\n      <td>time</td>\n      <td>Time</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n\n\n***\n\n### IBM Watson - Sentiment Analysis\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code\"}\ndf_content = pd.DataFrame(df_articles, columns=['source', 'content', 'publishedAt'])\ndf_content['source'] = df_content['source'].apply(lambda x: x['id'])\n\nauthenticator = IAMAuthenticator('_4YE1Qj6PFjke1zYsp7Kapgfu5laaaBE1E_ZUw1IiUPa')\nnatural_language_understanding = NaturalLanguageUnderstandingV1(\n    version='2020-08-01',\n    authenticator=authenticator\n)\n\nnatural_language_understanding.set_service_url('https://api.us-south.natural-language-understanding.watson.cloud.ibm.com/instances/8b0909d1-3768-4c54-b80d-b9817610e36d')\n\n#IBM Watson\ni = 0\nibm_source = []\nibm_date = []\nibm_score = []\nibm_label = []\nibm_content = []\n\nfor index, row in df_content.iterrows():\n    response = natural_language_understanding.analyze(\n    text=row['content'], language = 'en',\n    features=Features(sentiment=SentimentOptions())).get_result()\n\n    s = row['source']\n    ibm_source.append(s)\n    d = row['publishedAt']\n    ibm_date.append(d)\n    c = row['content']\n    ibm_content.append(c)\n    x = response['sentiment']['document']['score']\n    x = round(x, 4)\n    ibm_score.append(x)\n    y = response['sentiment']['document']['label']\n    ibm_label.append(y)\n    # print(response['sentiment']['document']['score'])\n    # print(response['sentiment']['document']['label'])\n    # print(json.dumps(response, indent=2))\n\n    i=i+1   \n\nresults = {\"id\": ibm_source, \"ibm_date\": ibm_date, \"ibm_score\": ibm_score, \"ibm_label\": ibm_label, \"ibm_content\": ibm_content}\n\nresults = pd.DataFrame(results)\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code\"}\ndate = date.today()\n\nname = '../' + str(date) + '_results.csv'\n\nresults.to_csv(name, index=False)\n\nresults = results.merge(sources, how='left')\n\nresults = pd.DataFrame(results, columns=['name', 'category', 'ibm_score', 'ibm_label', 'ibm_date', 'ibm_content'])\n\nresults = results.rename(columns={'ibm_date': 'date'})\n\nresults['date'] = pd.to_datetime(results['date'])\n\nresults['date'] = results['date'].dt.date\n\nresults.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>category</th>\n      <th>ibm_score</th>\n      <th>ibm_label</th>\n      <th>date</th>\n      <th>ibm_content</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>The Verge</td>\n      <td>technology</td>\n      <td>0.6783</td>\n      <td>positive</td>\n      <td>2023-11-07</td>\n      <td>Redwood Materials will recycle stationary stor...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Ars Technica</td>\n      <td>technology</td>\n      <td>0.2886</td>\n      <td>positive</td>\n      <td>2023-10-31</td>\n      <td>Enlarge/ GreenPower has given its class-D elec...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Ars Technica</td>\n      <td>technology</td>\n      <td>0.0000</td>\n      <td>neutral</td>\n      <td>2023-11-13</td>\n      <td>Enlarge/ These are piles of lithium harvested ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Business Insider</td>\n      <td>business</td>\n      <td>-0.5678</td>\n      <td>negative</td>\n      <td>2023-11-03</td>\n      <td>BP's EV charging arm has bought $100 million w...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Time</td>\n      <td>general</td>\n      <td>-0.7521</td>\n      <td>negative</td>\n      <td>2023-11-07</td>\n      <td>A lithium-ion battery recycler and a program t...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n\n\n",
    "supporting": [
      "3_5_news_api_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}