---
title: "U.S. Oil Production"
format: html
---
```{css, echo = FALSE}
.justify {
    text-align: justify !important;
    text-indent: 20px; 
}

.epigrafe {
    text-align: justify !important;
    text-indent: 20px; 
    border: 1.5px solid #87c8b5; 
    padding-top: 15px;
    padding-bottom: 5px;
    padding-right: 15px;
    padding-left: 15px;
    font-size: 14px;
    background-color: #f9f9f9; 
    margin: 20px 0px 30px 0px;
}
```

``` {r}
#| echo: false
#| message: false
#| code-fold: true
#| code-summary: "Libraries"
#| results: 'hide'
#| warning: false

library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(gridExtra)
library(readxl)
library(imputeTS)
```

::: {.epigrafe}

The first step to begin the analysis was to import the dataset containing the time series data for the daily U.S. Oil Production. 
To evaluate the stationarity of the time series, we started with an Autocorrelation Function (ACF) plot. Within this plot, we observe a high positive autocorrelation for the early lags, which gradually decreases as the lags increase. This behavior indicates a tendency towards stationarity within the time series. To further this analysis, we apply the Augmented Dickey-Fuller test.

:::

``` {r, fig.width = 8, fig.height = 4}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Plot ACF"
#| warning: false

# Import dataset
ts_oil_production <- read_csv('../data/ts_oil_production.csv')

# Create time series
ts_oil_production<-ts(ts_oil_production$x,star=decimal_date(as.Date("2000-01-01",format = "%Y-%m-%d")),frequency = 1)

# Resize plots
options(repr.plot.width = 5, repr.plot.height = 2) 

# ACF Plot
acf_oil_production <- ggAcf(ts_oil_production, main="ACF Plot for Oil Production")

acf_oil_production
```

::: {.epigrafe}

The results of the Augmented Dickey-Fuller test are shown below. The p-value obtained exceeds the specified significance level of 0.05. This result emphasizes that the time series for oil production has non-stationary characteristics.

:::

``` {r, fig.width = 8, fig.height = 4}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Augmented Dickey-Fuller Test Code"
#| warning: false

# Augmented Dickey-Fuller Test calculation
test_oil_production <- adf.test(ts_oil_production)

# Print results
print(test_oil_production)
```

::: {.epigrafe}

Define if its stationary. Compare ACF to Augmented Dickey Fuller Test 

:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Differencing Code"
#| warning: false

options(repr.plot.width = 6, repr.plot.height = 6) 

# ACF Differenced Plot
acf_diff_oil_production <- ggAcf(diff(ts_oil_production), main="ACF Plot for Oil Production First Differenced")

# Show plot
acf_diff_oil_production
```

::: {.epigrafe}

Describe the ACF plot above.

Compare to the Augmented Dickey-Fuller Test below.

:::

``` {r, fig.width = 8, fig.height = 4}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Augmented Dickey-Fuller Test Code"
#| warning: false

# Save differenced time series
diff_oil_production <- diff(ts_oil_production)

# Augmented Dickey-Fuller Test calculation
test_diff_oil_production <- adf.test(diff_oil_production)

# Print results
print(test_diff_oil_production)
```

::: {.epigrafe}

Keep the differenced ts because its stationary.

:::

``` {r, fig.width = 8, fig.height = 6}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "ACF and PACF Plot Code"
#| warning: false

# Keep differenced Time Series
ts_oil_production <- diff_oil_production

# Resize plots
options(repr.plot.width = 5, repr.plot.height = 2) 

# ACF Plot
acf_oil_production <- ggAcf(ts_oil_production, main="ACF Plot for Oil Production")

# PACF Plot
pacf_oil_production <- ggPacf(ts_oil_production, main="PACF Plot for Oil Production")

# Arrange Plots
grid.arrange(acf_oil_production, pacf_oil_production, nrow=2)
```

::: {.epigrafe}

Based on the values obtained before, we assess the best p,d,q below

:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Model Parameter Assesing"
#| warning: false

# Assigned time series to variable used in the algorithm
xt <- ts_oil_production

# PACF plot parameter selection
p_value <- 3

# Number of differences
d_value <- 1

# ACF plot parameter selection
q_value <- 4

# Initialize variable
i <- 1

# Initialize variable
temp <- data.frame()

# Calculate number of rows
rows <- p_value*d_value*q_value

# 
ls <- matrix(rep(NA,6*rows),nrow=rows) 

# Parameter testing loop
for (p in 1:p_value+1)
{
  for(q in 1:q_value+1)
  {
    for(d in 1:d_value)
    {
      
      if(p-1+d+q-1<=8) #usual threshold
      {
        
        model<- Arima(xt,order=c(p-1,d,q-1),include.drift=TRUE) 
        ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
        i=i+1
        #print(i)
        
      }
      
    }
  }
}

temp <- as.data.frame(ls)

names(temp) <- c("p","d","q","AIC","BIC","AICc")

#temp
knitr::kable(temp)
```

::: {.epigrafe}

Model Selection

:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Model Selection"
#| warning: false

# Check best model with AIC
temp[which.min(temp$AIC),]

# Check best model with BIC
temp[which.min(temp$BIC),]

# Check best model with AICc
temp[which.min(temp$AICc),]
```

::: {.epigrafe}

Model Diagnostics

:::

``` {r, fig.width = 8, fig.height = 6}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Model Diagnostics - parameters with best AIC"
#| warning: false

AIC <- temp[which.min(temp$AIC),]

p1 <- AIC$p
d1 <- AIC$d
q1 <- AIC$q

# Model diagnostics for best AIC
model_output <- capture.output(sarima(xt, p1, d1, q1))
```

::: {.epigrafe}

Describe model diagnostics

:::

::: {.epigrafe}

Fit ARIMA model using Arima()

:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Model Fitting"
#| warning: false

AIC <- Arima(xt,order=c(p1, d1, q1),include.drift = TRUE)

plot(xt, col="black")
lines(fitted(AIC), col="green")
legend(x = "topleft", legend = c("xt", "AIC"), col = c("black", "green"), lty = 1)
```

::: {.epigrafe}

Compare fitted vs Actual plots

:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Fitted Model Summary"
#| warning: false

fit <- Arima(xt, order=c(p1, d1, q1))
summary(fit)
```

::: {.epigrafe}

Model Equation with Latex

\begin{align}
x_t &= \Phi x_{t-1} + w_t + \Theta w_{t-1} \\
x_t &= 0.1832 x_{t-1} - 0.6324 x_{t-2} + w_t - 0.4982 w_{t-1}
\end{align}
:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "auto.arima()"
#| warning: false

auto.arima(xt)
```

::: {.epigrafe}

Compare selected model to auto.arima()

:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Forecast"
#| warning: false

forecast_fit <- forecast(fit,10)

forecast_fit
```

``` {r, fig.width = 8, fig.height = 4}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Forecast Plot"
#| warning: false

# Path to save plot
file_path <- "../images/6_1_oil_production_forecast.png"

# Plot
plot <- autoplot(forecast_fit)

# Use ggsave to save the plot as a PNG image
ggsave(plot, filename = file_path, width = 10, height = 5)

# Show plot
plot
```

::: {.epigrafe}

Conclusion

:::