---
title: "ARIMA | U.S. Oil Production by Month"
format:
  html:
    embed-resources: true
---
```{css, echo = FALSE}
.justify {
    text-align: justify !important;
    text-indent: 20px; 
}

.epigrafe {
    text-align: justify !important;
    text-indent: 20px; 
    border: 1.5px solid #87c8b5; 
    padding-top: 15px;
    padding-bottom: 5px;
    padding-right: 15px;
    padding-left: 15px;
    font-size: 14px;
    background-color: #f9f9f9; 
    margin: 20px 0px 30px 0px;
}
```

``` {r}
#| echo: false
#| message: false
#| code-fold: true
#| code-summary: "Libraries"
#| results: 'hide'
#| warning: false

library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(gridExtra)
library(readxl)
library(imputeTS)
library(zoo)
library(knitr)
library(kableExtra)
library(patchwork)
```

::: {.epigrafe}

To forecast future oil production, we will apply the steps for ARIMA modeling. In the [Exploratory Data Analysis | Oil Production](https://mazuckerberg.georgetown.domains/DSAN_5600/5_EDA/5_oil_price_month.html) section, the raw data is transformed into a stationary time series through the application of first difference. The resulting ACF and PACF show the autocorrelation structure in the resulting time series.
:::

### Autocorrelation Plots

``` {r, fig.width = 8, fig.height = 4}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Plot"
#| warning: false

# Import dataset
ts_oil_production <- read_csv('../data/ts_us_oil_production.csv')

# Create time series
ts_oil_production <- ts(ts_oil_production$x,star=decimal_date(as.Date("2000-01-15",format = "%Y-%m-%d")),frequency = 12)

# Resize plots
options(repr.plot.width = 5, repr.plot.height = 2) 

# ACF Plot
acf_plot <- ggAcf(diff(ts_oil_production), main="ACF Plot for Oil Production")

# PACF Plot
pacf_plot <- ggPacf(diff(ts_oil_production), main="PACF Plot for Oil Production")

# Arrange Plots
grid.arrange(acf_plot, pacf_plot, nrow=2)
```

### Parameters Selection

::: {.epigrafe}
To determine the optimal parameters for our model, we look at the ACF and PACF plots. Both the ACF and PACF plots showed significant autocorrelation at lag 4. Therefore, we chose the following parameters for the ARIMA model: 

$p=4$

$d=1$

$q=4$ 

To validate our choice, we used the auto.arima() function, which resulted in a model with parameters (0,1,2). This careful approach ensures that our ARIMA model is fine-tuned to recognize the patterns in the time series data.
:::

::: {.panel-tabset}

## Parameters

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Model Parameter Assesing"
#| warning: false

# Assigned time series to variable used in the algorithm
xt <- ts_oil_production

# PACF plot parameter selection
p_value <- 4

# Number of differences
d_value <- 2

# ACF plot parameter selection
q_value <- 4

# Initialize variable
i <- 1

# Initialize variable
temp <- data.frame()

# Calculate number of rows
rows <- p_value*d_value*q_value

# 
ls <- matrix(rep(NA,6*rows),nrow=rows) 

# Parameter testing loop
for (p in 1:p_value+1)
{
  for(q in 1:q_value+1)
  {
    for(d in 1:d_value)
    {
      
      #if(p-1+d+q-1<=8) #usual threshold
      #{
        
        model<- Arima(xt,order=c(p-1,d-1,q-1),include.drift=TRUE) 
        ls[i,]= c(p-1,d-1,q-1,model$aic,model$bic,model$aicc)
        i=i+1
        #print(i)
        
      #}
      
    }
  }
}

temp <- as.data.frame(ls)

names(temp) <- c("p","d","q","AIC","BIC","AICc")

#temp
#knitr::kable(temp)
```

``` {r}
#| echo: false
#| message: false
#| code-fold: true
#| code-summary: "Model Selection"
#| warning: false

cat('Minimum AIC:')
# Check best model with AIC
temp[which.min(temp$AIC),]

cat('Minimum BIC:')
# Check best model with BIC
temp[which.min(temp$BIC),]

cat('Minimum AICc:')
# Check best model with AICc
temp[which.min(temp$AICc),]
```

## auto.arima()

``` {r}
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: "auto.arima()"

auto.arima(xt)
```

:::

### Diagnostics

::: {.epigrafe}
When evaluating the model selection criteria, both AIC and AICc favors model (2, 1, 2) as optimal, in contrast to BIC is (1, 1, 1). A detailed examination of the diagnostic plots and auto.arima() results confirms the superiority of model (2, 1, 2). The standardized residuals show a random pattern, the Q-Q plot shows close normality, and all Ljung box statistics exceed the significance level, indicating the absence of autocorrelation.
:::

::: {.panel-tabset}

## auto.arima()

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Model Diagnostics - parameters auto.arima()"
#| warning: false

p_autoarima <- 0
d_autoarima <- 1
q_autoarima <- 1

# Model diagnostics for best AIC
model_output <- capture.output(sarima(xt, p_autoarima, d_autoarima, q_autoarima))
```

## AIC

``` {r, fig.width = 8, fig.height = 6}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Model Diagnostics - parameters with best AIC"
#| warning: false

AIC <- temp[which.min(temp$AIC),]

p1 <- AIC$p
d1 <- AIC$d
q1 <- AIC$q

# Model diagnostics for best AIC
model_output <- capture.output(sarima(xt, p1, d1, q1))
```

## BIC

``` {r, fig.width = 8, fig.height = 6}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Model Diagnostics - parameters with best BIC"
#| warning: false

BIC <- temp[which.min(temp$BIC),]

p2 <- BIC$p
d2 <- BIC$d
q2 <- BIC$q

# Model diagnostics for best BIC
model_output <- capture.output(sarima(xt, p2, d2, q2))
```

:::

### Fit Model

::: {.epigrafe}
Examining the fit line next to the original time series in the ARIMA model reveals a similarity, indicating a good fit. This visual coherence builds confidence in the model's predictive power. It highlights the model's ability to produce accurate forecasts.
:::

::: {.panel-tabset}

## Model Fit Plot

``` {r}
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: "Model Fitting"

best_model <- temp[which.min(temp$AIC),]

p <- best_model$p
d <- best_model$d
q <- best_model$q


model <- Arima(xt,order=c(p, d, q),include.drift = TRUE)

plot(xt, col="black")
lines(fitted(model), col="green")
legend(x = "topleft", legend = c("xt", "AIC"), col = c("black", "green"), lty = 1)
```

## Model Summary

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Fitted Model Summary"
#| warning: false

fit <- Arima(xt, order=c(p, d, q))
summary(fit)
```

:::

### Equation

::: {.epigrafe}
\begin{align}
(1 - 0.7524B + 0.9471B^2)(1 - B)(X_t) &= (1 - 0.8441B + 0.9999B^2)(W_t) \\
\end{align}
:::

### Forecast

::: {.epigrafe}
The visual representation below shows the forecast of oil production, which shows modest fluctuations. When compared to benchmark models, our predictions are similar to the naive model, but there are notable differences when compared to the mean and seasonal naive models. 

To improve forecasting accuracy, future iterations may include the exploration of advanced models such as VAR or ARIMAX, incorporating exogenous variables for deeper analysis.
:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Forecast plot"
#| warning: false

forecast_fit <- forecast(fit,24)

# Plot
plot <- autoplot(forecast_fit)

# Show plot
plot
```

``` {r, fig.width = 8, fig.height = 4}
#| echo: false
#| message: false
#| code-fold: true
#| code-summary: "Forecast Plot"
#| warning: false

# Path to save plot
file_path <- "../images/6_oil_production_month.png"

# Use ggsave to save the plot as a PNG image
ggsave(plot, filename = file_path, width = 10, height = 5)
```

### Benchmark Models

``` {r, fig.width = 8, fig.height = 4}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Benchmark Models Plot"
#| warning: false

autoplot(xt) +
  autolayer(meanf(xt, h=11),
            series="Mean", PI=FALSE) +
  autolayer(naive(xt, h=11),
            series="Naïve", PI=FALSE) +
  autolayer(snaive(xt, h=11),
            series="Seasonal naïve", PI=FALSE) +
  autolayer(forecast(forecast_fit, h=11),
            series="Fit", PI=FALSE) +
  ggtitle("Forecasts for Oil Production") +
  xlab("Year") + ylab("Production") +
  guides(colour=guide_legend(title="Forecast"))
```