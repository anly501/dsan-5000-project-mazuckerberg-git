{"title":"Data Visualization","markdown":{"yaml":{"title":"Data Visualization"},"headingText":"Overview","containsRefs":false,"markdown":"\n```{css, echo = FALSE}\n.justify {\n    text-align: justify !important;\n    text-indent: 20px; \n}\n\n.epigrafe {\n    text-align: justify !important;\n    text-indent: 20px; \n    border: 1.5px solid #87c8b5; \n    padding-top: 15px;\n    padding-bottom: 5px;\n    padding-right: 15px;\n    padding-left: 15px;\n    font-size: 14px;\n    background-color: #f9f9f9; \n    margin: 20px 0px 30px 0px;\n}\n```\n\n\n::: {.justify}\nIn the following section, we can see different visualizations based on the gathered information. The sources from which the data was obtained can be found in the [Data Sources](https://mazuckerberg.georgetown.domains/DSAN_5600/3_data_sources.html) section. The collected data was analyzed and data cleaning steps were applied. Above each visualization, the code for the data cleaning and the visualization building steps is available.\n\n:::\n\nBelow are the libraries used in this section:\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Libraries\"\n#| results: 'hide'\n#| warning: false\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(forecast)\nlibrary(astsa) \nlibrary(xts)\nlibrary(tseries)\nlibrary(fpp2)\nlibrary(fma)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(TSstudio)\nlibrary(quantmod)\nlibrary(tidyquant)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(readxl)\n```\n\n### Global Oil Production\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| results: 'hide'\n#| warning: false\n\n# Import dataset\ndf_oil_production <- read_csv('./data/oil-production-by-country.csv')\n\n# Rename the columns of the dataframe\nnames(df_oil_production) <- c('Country', 'Code', 'Year', 'Oil_production_TWh')\n\n# Calculate the total oil production by countries for 2022.\ntop_countries <- df_oil_production %>% \n    filter(Year == 2022 & str_length(Code) == 3) %>% \n    group_by(Country) %>%\n    summarize(total_production = sum(Oil_production_TWh)) \n\n# Keep the top 10 countries with higher oil production for 2022\ntop_countries <- top_countries %>% \n    arrange(desc(total_production)) %>%  \n    head(15)\n\n# Filter dataframe by the top 10 oil producing countries\ndf_oil_production <- df_oil_production %>% \n    filter(Country %in% top_countries$Country)\n\n# Save dataframe as a new file\nwrite.csv(df_oil_production, './data/viz_oil_production.csv', row.names = FALSE)\n```\n\n``` {=html}\n<div class='tableauPlaceholder' id='viz1696390734248' style='position: relative'><noscript><a href='#'><img alt='Oil Production (TWh) Map by Year ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Oi&#47;OilProductionTWhMapbyYear&#47;OilProductionMapAnimation&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='OilProductionTWhMapbyYear&#47;OilProductionMapAnimation' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Oi&#47;OilProductionTWhMapbyYear&#47;OilProductionMapAnimation&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-GB' /><param name='filter' value='publish=yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1696390734248');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>\n```\n\n::: {.epigrafe}\nThe above plot is an animation created using Tableau software. The data in this visualization consists of the top 15 oil-producing countries for the year 2022. As the years progress, the colors of the countries change based on each country's production values. The selected time period is from 2000 to 2022.\n\nBased on the information from the visualization, from the year 2000 to 2011, the countries with less oil production were Kazakhstan and Qatar. On the other hand, the top 2 oil-producing countries were Saudi Arabia and Russia.\n\nFrom the year 2011 to 2014, the United States had a significant increase in oil-production, making it really close to Saudi Arabia and Russia. By the year 2018, it had a production high above the previously mentioned countries making it the top 1. This situation continued until the year 2022. The rest of the countries remain with lower price values.\n:::\n\n### U.S. Oil Production\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Get oil price data from stock market\ndf_oil_production_us <- read_csv('./data/oil_production.csv')\n\n# # Rename Columns\nnames(df_oil_production_us) <- c(\"Data\")\n\n# Filter rows\ndf_oil_production_us <- tail(df_oil_production_us, nrow(df_oil_production_us)-3)\n\n# Separate Columns\ndf_oil_production_us <- df_oil_production_us %>%\n  separate('Data', into = c(\"Date\", \"Production\"), sep = \";\")\n\n# Chage data type\ndf_oil_production_us$Date <- as.Date(df_oil_production_us$Date, format = \"%d/%m/%Y\")\n\n# Change data type\ndf_oil_production_us$Production <- round(as.numeric(df_oil_production_us$Production), 2)\n\n#Save dataframe as a new file \nwrite.csv(df_oil_production_us, './data/viz_us_oil_production.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Chage data type\ndf_oil_production_us <- df_oil_production_us %>% filter(year(Date) >= 2000 & year(Date) <= 2022)\n\n# Create plot\nviz_oil_production <- plot_ly(data = df_oil_production_us, x = df_oil_production_us$Date, y = df_oil_production_us$Production, type = 'bar') %>%\n                layout(\n                  title = 'U.S. Oil Production',\n                  xaxis = list(title = 'Date'),\n                  yaxis = list(title = 'Production (thousand barrels)'),\n                  showlegend = FALSE\n                )\n# Show plot\nggplotly(viz_oil_production)\n```\n\n::: {.epigrafe}\n\nThis project is primarily focused on the United States, and as such we are analyzing its oil production by month for the past 22 years. \n\nFrom the plot, we can see that for the first 11 years, from 2000 to 2011, the monthly oil production was below 6 thousand barrels. There is an upward trend until the middle of 2015, when the production increased almost to 10 thousand barrels per month. For the next year, the production had a slight decrease, but the values were still higher compared to the first years of analysis.\n\nIn the following years, we can see that there was a big increase once again, reaching the 13 thousand barrels production, but due to the COVID pandemic, the production had a great fall, causing the increase trend to slow down.\n:::\n\n\n### Crude Oil Price\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Get oil price data from stock market\ndf_oil_price <- tq_get(\"CL=F\", get = \"stock.prices\", from = \"2000-01-01\", to = \"2022-12-31\")\n\n# Calculate adjusted price\ndf_oil_price$adjusted <- df_oil_price$adjusted/df_oil_price$adjusted[1]\n\n# Create dataframe\ndf_oil_price <- data.frame(df_oil_price,rownames(df_oil_price))\n\n# Save dataframe as a new file \nwrite.csv(df_oil_price, './data/viz_oil_price.csv', row.names = FALSE)\n```\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Create plot\nviz_oil_price <- plot_ly(df_oil_price, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = df_oil_price$date, y = df_oil_price$adjusted, name = 'Price', showlegend = FALSE)%>%\n  layout(title = 'Crude Oil Price by Day',\n         xaxis = list(rangeslider = list(visible = T)))\noptions(warn = -1)\n\n# Set plot layout\nviz_oil_price <- viz_oil_price %>%\n  layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff',\n                      title = 'Index'),\n         plot_bgcolor='#e5ecf6')\n\n# Show plot\nggplotly(viz_oil_price)\n```\n\n::: {.epigrafe}\nFrom 2003 to 2008, oil prices rose, quadrupling and setting numerous records. The 2007 subprime mortgage crisis, triggered by the collapse of the 2006 U.S. housing bubble, led to a severe global liquidity crisis and subsequent economic events, including the January 2008 stock market crisis, the October 2008 global stock market crisis, the international economic downturn, and the Great Recession.\n\nIn 2015, crude oil prices fell due to oversupply relative to global demand, resulting in steadily rising inventories throughout the year.\n\nThe COVID-19 pandemic caused a sharp drop in oil prices due to government-imposed shutdowns, stay-at-home orders, and travel restrictions. An unprecedented event occurred on April 20th, 2020, when oil prices turned negative. In March, an oil price war broke out between Russia and Saudi Arabia due to disagreements over production levels.\n\nBy the early summer of 2020, oil prices rebounded as nations lifted shutdowns, and OPEC agreed to substantial crude oil production cuts. Major central banks stopped raising interest rates, supporting demand. Towards the end of the year, optimism surrounded the planned launch of several COVID-19 vaccines, supporting the market.\n:::\n\n### Inflation Rate\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n \n# Import dataset\ndf_inflation <- read_csv('./data/inflation.csv')\n\n# Filter information to keep United States total inflation rate by moth.\ndf_inflation <- df_inflation %>%\n     filter(LOCATION == \"USA\" & SUBJECT == \"TOT\" & FREQUENCY == \"M\" & MEASURE == \"AGRWTH\")\n\n# Format the Time column\ndf_inflation$TIME <- paste(df_inflation$TIME, \"-01\", sep = \"\")\n\n# Chage data type\ndf_inflation$TIME <- as.Date(df_inflation$TIME)\n\n# Select relevant columns\ndf_inflation <- df_inflation %>% select('TIME', 'Value')\n\n# Save dataframe as a new file\nwrite.csv(df_inflation, './data/viz_inflation.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Filter data\ndf_inflation <- df_inflation %>% filter(TIME >= '2000-01-01' & TIME < '2023-01-01') \n\n# Create plot\nviz_inflation <- plot_ly(data = df_inflation, x = ~TIME, y = ~Value, type = 'bar', \n                marker = list(color = ifelse( grepl(\"^2000-\", df_inflation$TIME) | \n                                              grepl(\"^2007-\", df_inflation$TIME) | \n                                              grepl(\"^2014-\", df_inflation$TIME) | \n                                              grepl(\"^2022-\", df_inflation$TIME), \n                                              \"red\", \n                                      ifelse( grepl(\"^2015-\", df_inflation$TIME) | \n                                              grepl(\"^2008-1\", df_inflation$TIME)| \n                                              grepl(\"^2020-\", df_inflation$TIME), \n                                              \"green\", \n                                              \"lightblue\")))) %>%\n                layout(\n                  title = 'U.S. Inflation Variations by Month',\n                  xaxis = list(title = 'Time'),\n                  yaxis = list(title = 'Rate'),\n                  showlegend = FALSE\n                )\n# Show plot\nggplotly(viz_inflation)\n```\n\n::: {.epigrafe}\nThe bar chart above was created using the Plotly package for R. The data in this visualization consists of the annual percentage change in inflation for the U.S. from the year 2000 to 2022, plotted monthly. To enhance clarity, certain bars in the visualization have been highlighted to make the context explanations below easier to understand.\n\nThe Consumer Price Index (CPI), calculated by the Bureau of Labor Statistics, is a widely used measure of inflation. However, the Federal Reserve prefers the Personal Consumption Expenditures (PCE) index because it provides a clearer picture of inflation trends that are less affected by short-term price changes, such as food and energy. The Fed uses monetary policy to manage inflation over the economic cycles.\n\nIn 2000, there was a business cycle expansion of 4.1%, mainly due to the Tech Bubble burst. In 2001, inflation was 1.60% YOY, peaking in March due to President Bush's tax cut and hitting a trough in November after the 9/11 attacks.\n\nIn 2007, inflation peaked at 4.1% in December in the midst of the banking crisis. In 2008, during the International Financial Crisis, YOY inflation was only 0.1%, coupled with a GDP contraction of -0.1%.\n\nIn 2014 and 2015, annual inflation rates of 0.80% and 0.90% respectively accompanied business cycle expansion and GDP growth. The end of the quantitative easing in 2014 and deflation in oil and gas prices in 2015 were key events.\n\nIn 2020, the COVID-19 pandemic triggered a global economic shutdown, resulting in a 1.4% inflation rate and a -3.4% GDP growth. In 2021, government recovery efforts led to a 5.9% GDP growth and 7% YOY inflation. The Fed responded by raising interest rates,  leading to a high inflation rate of 6.50%, and business activity contraction in 2022. Russia's invasion of Ukraine had a significant impact on the U.S. and global economies.\n:::\n\n\n### Interest Rate\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Import dataset\ndf_interest <- read_excel('./data/interest_rates.xlsx', sheet = \"Annual\", .name_repair = \"unique_quiet\") \n\n# Filter information to keep Central Back Policy Rate.\ndf_interest <- df_interest %>% filter(Indicator == 'Central Bank Policy Rate')\n\n# Convert dataframe from wide to long\ndf_interest <- df_interest %>%\n  gather(key = \"Year\", value = \"Value\", -Indicator, -'...2', -'...3', -Scale)\n\n# Select relevant columns\ndf_interest <- df_interest %>% select('Year', 'Value')\n\n# Change data type\ndf_interest$Value <- round(as.numeric(df_interest$Value), 2)\n\n# Save dataframe as a new file \nwrite.csv(df_interest, './data/viz_interest.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Set color variables for each data point\ncolor_2000 <- 'rgba(222,45,38,0.8)' # red\ncolor_2001 <- 'rgba(204,204,204,1)' # gray\ncolor_2002 <- 'rgba(210,238,130,1)' # green\ncolor_2003 <- 'rgba(210,238,130,1)' # green\ncolor_2004 <- 'rgba(204,204,204,1)' # gray\ncolor_2005 <- 'rgba(222,45,38,0.8)' # red\ncolor_2006 <- 'rgba(222,45,38,0.8)' # red\ncolor_2007 <- 'rgba(222,45,38,0.8)' # red\ncolor_2008 <- 'rgba(210,238,130,1)' # green\ncolor_2009 <- 'rgba(204,204,204,1)' # gray\ncolor_2010 <- 'rgba(204,204,204,1)' # gray\ncolor_2011 <- 'rgba(204,204,204,1)' # gray\ncolor_2012 <- 'rgba(204,204,204,1)' # gray\ncolor_2013 <- 'rgba(204,204,204,1)' # gray\ncolor_2014 <- 'rgba(204,204,204,1)' # gray\ncolor_2015 <- 'rgba(222,45,38,0.8)' # red\ncolor_2016 <- 'rgba(222,45,38,0.8)' # red\ncolor_2017 <- 'rgba(204,204,204,1)' # gray\ncolor_2018 <- 'rgba(204,204,204,1)' # gray\ncolor_2019 <- 'rgba(222,45,38,0.8)' # red\ncolor_2020 <- 'rgba(210,238,130,1)' # green\ncolor_2021 <- 'rgba(204,204,204,1)' # gray\n\n# Create plot\nviz_interest <- plot_ly(df_interest, x = df_interest$Year, y = df_interest$Value, type = 'bar',\n            marker = list(color = c(color_2000, color_2001, color_2002, color_2003, color_2004, \n                                    color_2005, color_2006, color_2007, color_2008, color_2009,\n                                    color_2010, color_2011, color_2012, color_2013, color_2014, \n                                    color_2015, color_2016, color_2017, color_2018, color_2019, \n                                    color_2020, color_2021)),\n            text = df_interest$Value,  \n            textposition = 'outside',\n            textangle = 0)\n\n# Set de layout of the plot\nviz_interest <- viz_interest %>% layout(title = \"Interest Rate by Year\",\n         xaxis = list(title = \"Year\"),\n         yaxis = list(title = \"Rate\"))\n\n# Show plot\nggplotly(viz_interest)\n```\n\n::: {.epigrafe}\nThe bar chart visualization above was created using the Plotly package for R. The data in this graph illustrates the annual interest rates for the U.S. from the year 2000 through 2021. Certain bars in the visualization have been highlighted in color red and green in order to show the different increases and decreases in the interest rates, which are explained below.\n\nIn 2000, after a prolonged period of economic expansion, the US Federal Reserve funds rate was 6.5%. The bursting of the technology bubble and the 9/11 attacks triggered a global economic slowdown. This led to 11 interest rate reductions, bringing it down to 1.75% by the end of the year.\n\nIn 2002-2003, the Fed continued to cut rates due to a weak recovery and low inflation. In 2005-2006, they raised rates 17 times to cool the economy and address the real estate bubble. In 2007-2008, the housing market crisis and rising unemployment prompted the Fed to cut rates from 4.75% to 2%.\n\nBy the end of 2008, during the Great Recession, rates were reduced to a range of 0 to 0.25%, with no inflationary pressures. Quantitative easing was introduced to stimulate the economy.\n\nSeven years later, the Fed cautiously raised rates as the economy recovered, with the first hike coming in December 2015. Economic concerns from China in early 2016 and falling oil prices led to a year-long pause in rate hikes. In 2019, U.S.-China trade tensions prompted three rate cuts in the second half of the year to support the economy.\n\nIn 2020, the COVID-19 pandemic caused massive job losses and an unemployment rate of 14.7%, leading to two emergency rate cuts that returned rates to the 0-0.25% range.\n:::\n\n\n### Food Production\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| results: 'hide'\n#| warning: false\n\n# Set the start and end dates\nstart_date <- \"2000-01-01\"\nend_date <- \"2022-12-31\"\n\n# Define the symbol for \nsymbol <- \"GOAI\"\n\n# Use getSymbols() to fetch the data\ngetSymbols(symbol, from = start_date, to = end_date, src = \"FRED\")\n\n# Access the data as a data frame\ndf_food <- as.data.frame(GOAI)\n\ndf_food <- rownames_to_column(df_food, var = \"DATE\")\n\ndf_food$DATE <- as.Date(df_food$DATE)\n\n# Rename columns\nnames(df_food) <- c(\"DATE\", \"Value\")\n\n# Save dataframe as a new file \nwrite.csv(df_food, './data/viz_food_production.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Create plot\nviz_food <- plot_ly(df_food, x = df_food$DATE, y = df_food$Value, type = 'bar')\n\n# Set de layout of the plot\nviz_food <- viz_food %>% layout(title = \"Food Production by Quarter\",\n         xaxis = list(title = \"Date\"),\n         yaxis = list(title = \"Billions of Dollars\"))\n\n# Show plot\nggplotly(viz_food)\n```\n\n::: {.epigrafe}\n\nAs it was introduced before, the food industry is very important for the analysis of oil production and prices on different industries. Plotting quarterly food production in billions of dollars is helpful in understanding the trend and variation in the data.\n\nPlotting quarterly food production in billions of dollars is helpful in understanding the trend and variation in the data. In this case, we can see a clear upward trend that was directly affected by two events that caused a drop in the following quarters. The first occurred in 2008 due to the financial crisis, where the recovery of production was slower compared to the beginning of 2020, when the COVID pandemic took place. In this second event, the trend increased at a higher rate, reaching values 10 thousand higher compared to the quarters before the pandemic.\n:::\n\n### iShares U.S. Healthcare ETF\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Get oil price data from stock market\ndf_healthcare_index <- tq_get(\"iyh\", get = \"stock.prices\", from = \"2000-01-01\", to = \"2022-12-31\")\n\n# Calculate adjusted price\ndf_healthcare_index$adjusted <- df_healthcare_index$adjusted\n\n# Create dataframe\ndf_healthcare_index <- data.frame(df_healthcare_index,rownames(df_healthcare_index))\n\n# Save dataframe as a new file \nwrite.csv(df_healthcare_index, './data/viz_healthcare_index.csv', row.names = FALSE)\n```\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Create plot\nviz_healthcare_index <- plot_ly(df_healthcare_index, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = df_healthcare_index$date, y = df_healthcare_index$adjusted, name = 'Price', showlegend = FALSE)%>%\n  layout(title = 'Healthcare Index by Day',\n         xaxis = list(rangeslider = list(visible = T)))\noptions(warn = -1)\n\n# Set plot layout\nviz_healthcare_index <- viz_healthcare_index %>%\n  layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff',\n                      title = 'Index'),\n         plot_bgcolor='#e5ecf6')\n\n# Show plot\nggplotly(viz_healthcare_index)\n```\n\n::: {.epigrafe}\n\nThe Healthcare Index allows us to understand the performance, volatility and trends of the major companies in the healthcare industry.\n\nDuring the first 13 years of analysis, we can see that the index is below the value of 2, with very low volatility. In the following 7 years, the performance of the sector improved, reaching values higher than 4. We can clearly see the upward trend along these years. \n\nThe COVID pandemic had a different effect on this sector. In the first few weeks, there was a sharp decline that caused the index to fall to values close to 3. However, the sector's performance improved very quickly as demand for the products increased to levels never seen before. As a result, the index rose to levels above 6. This reflects the dependence of societies on the healthcare sector and the high expectations for the recovery of their lifestyles. Over the next few years, the industry maintained high index scores, but we can see that there was a lot of volatility.\n:::\n\n### Bus Passenger Trips\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Import dataset\ndf_bus_passengers <- read_excel('./data/bus_passengers.xlsx', sheet = \"UPT\", .name_repair = \"unique_quiet\") \n\n# Filter relevant rows\ndf_bus_passengers <- df_bus_passengers %>% filter(df_bus_passengers$'3 Mode' == \"Bus\")\n\n# Convert dataframe from wide to long\ndf_bus_passengers <- df_bus_passengers %>% gather(key = \"Year_Month\", value = \"Value\", -'NTD ID', -'Legacy NTD ID', -'Agency', -'Status', -'Reporter Type', -'UACE CD', -'UZA Name', -'Mode', -'TOS', -'3 Mode')\n\n# Select relevant columns\ndf_bus_passengers <- df_bus_passengers %>% select('3 Mode', 'Year_Month', 'Value')\n\n# Rename columns\nnames(df_bus_passengers) <- c('Type', 'Year_Month', 'Value')\n\n# Filter relevant rows\ndf_bus_passengers <- df_bus_passengers %>%\n  group_by(Type, Year_Month) %>%\n  summarize(Value = sum(Value))\n\n# Change data type\ndf_bus_passengers$Value <- as.integer(df_bus_passengers$Value)\n\n# Separate Year_Month\ndf_bus_passengers <- df_bus_passengers %>%\n  separate('Year_Month', into = c(\"Month\", \"Year\"), sep = \"/\")\n\n# Create DATE column\ndf_bus_passengers <- df_bus_passengers %>%\n  mutate(DATE = make_date(Year, Month, day = 1))\n\n# Select relevant columns\ndf_bus_passengers <- df_bus_passengers %>% select('DATE', 'Value')\n\n# Chage data type\ndf_bus_passengers$DATE <- as.Date(df_bus_passengers$DATE)\n\n# Select relevant columns\ndf_bus_passengers <- df_bus_passengers %>% select(DATE, Value)\n\n# Save dataframe as a new file \nwrite.csv(df_bus_passengers, './data/viz_bus_passengers.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Chage data type\ndf_bus_passengers <- df_bus_passengers %>% filter(year(DATE) <= 2022)\n\n# Create plot\nviz_bus_passengers <- plot_ly(data = df_bus_passengers, x = ~DATE, y = ~Value/1000000, type = 'bar') %>%\n                layout(\n                  title = 'U.S. Bus Passengers',\n                  xaxis = list(title = 'Date'),\n                  yaxis = list(title = 'Passenger Trips (millions)'),\n                  showlegend = FALSE\n                )\n# Show plot\nggplotly(viz_bus_passengers)\n```\n\n::: {.epigrafe}\n\nFrom the perspective of the transportation industry, the first analysis is bus passenger trips by month, nationally.\n\n:::\n\n### Air Carrier Domestic and International\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Import dataset\ndf_air_transport <- read_excel('./data/personal_expenditure_by_industry.xlsx', sheet = \"U20405-M\", .name_repair = \"unique_quiet\") \n\n# Make first row the column headers\nnames(df_air_transport) <- append(c('Line', 'Indicator', 'Code'), as.character(df_air_transport[7, ])[4:ncol(df_air_transport)])\n\n# Filter relevant rows\ndf_air_transport <- df_air_transport %>% filter(Indicator == \"Air transportation (64)\")\n\n# Convert dataframe from wide to long\ndf_air_transport <- df_air_transport %>% gather(key = \"Year-Month\", value = \"Value\", -'Line', -'Indicator', -'Code')\n\n# Change data type\ndf_air_transport$Value <- round(as.numeric(df_air_transport$Value), 2)\n\n# Select relevant columns\ndf_air_transport <- df_air_transport %>% select('Year-Month', 'Value')\n\n# Separate Year-Month\ndf_air_transport <- df_air_transport %>%\n  separate('Year-Month', into = c(\"Year\", \"Month\"), sep = \"M\")\n\n# Create DATE column\ndf_air_transport <- df_air_transport %>%\n  mutate(DATE = make_date(Year, Month, day = 1))\n\n# Select relevant columns\ndf_air_transport <- df_air_transport %>% select('DATE', 'Value')\n\n# Chage data type\ndf_air_transport$DATE <- as.Date(df_air_transport$DATE)\n\n# Save dataframe as a new file \nwrite.csv(df_air_transport, './data/viz_air_transport.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Chage data type\ndf_air_transport <- df_air_transport %>% filter(year(DATE) >= 2000)\n\n# Create plot\nviz_air_transport <- plot_ly(data = df_air_transport, x = ~DATE, y = ~Value, type = 'bar') %>%\n                layout(\n                  title = 'U.S. Air Carrier Domestic and International',\n                  xaxis = list(title = 'Date'),\n                  yaxis = list(title = 'Personal Consumption Expenditures (millions of dollars)'),\n                  showlegend = FALSE\n                )\n# Show plot\nggplotly(viz_air_transport)\n```\n\n::: {.epigrafe}\n\nDescription\n\n:::\n\n### Bikes Personal Expenditure\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Import dataset\ndf_bikes <- read_excel('./data/personal_expenditure_by_industry.xlsx', sheet = \"U20405-M\", .name_repair = \"unique_quiet\")\n\n# Make first row the column headers\nnames(df_bikes) <- append(c('Line', 'Indicator', 'Code'), as.character(df_bikes[7, ])[4:ncol(df_bikes)])\n\n# Filter relevant rows\ndf_bikes <- df_bikes %>% filter(Indicator == \"Bicycles and accessories\")\n\n# Convert dataframe from wide to long\ndf_bikes <- df_bikes %>% gather(key = \"Year-Month\", value = \"Value\", -'Line', -'Indicator', -'Code')\n\n# # Change data type\ndf_bikes$Value <- round(as.numeric(df_bikes$Value), 2)\n\n# Select relevant columns\ndf_bikes <- df_bikes %>% select('Year-Month', 'Value')\n\n# Separate Year-Month\ndf_bikes <- df_bikes %>%\n  separate('Year-Month', into = c(\"Year\", \"Month\"), sep = \"M\")\n\n# Create DATE column\ndf_bikes <- df_bikes %>%\n  mutate(DATE = make_date(Year, Month, day = 1))\n\n# Select relevant columns\ndf_bikes <- df_bikes %>% select('DATE', 'Value')\n\n# Chage data type\ndf_bikes$DATE <- as.Date(df_bikes$DATE)\n\n# Save dataframe as a new file \nwrite.csv(df_bikes, './data/viz_bikes.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Chage data type\ndf_bikes <- df_bikes %>% filter(year(DATE) >= 2000)\n\n# Create plot\nviz_bikes <- plot_ly(data = df_bikes, x = ~DATE, y = ~Value, type = 'bar') %>%\n                layout(\n                  title = 'U.S. Bicycles and accessories',\n                  xaxis = list(title = 'Date'),\n                  yaxis = list(title = 'Personal Consumption Expenditures (millions of dollars)'),\n                  showlegend = FALSE\n                )\n# Show plot\nggplotly(viz_bikes)\n```\n\n::: {.epigrafe}\n\nDescription\n\n:::","srcMarkdownNoYaml":"\n```{css, echo = FALSE}\n.justify {\n    text-align: justify !important;\n    text-indent: 20px; \n}\n\n.epigrafe {\n    text-align: justify !important;\n    text-indent: 20px; \n    border: 1.5px solid #87c8b5; \n    padding-top: 15px;\n    padding-bottom: 5px;\n    padding-right: 15px;\n    padding-left: 15px;\n    font-size: 14px;\n    background-color: #f9f9f9; \n    margin: 20px 0px 30px 0px;\n}\n```\n\n### Overview\n\n::: {.justify}\nIn the following section, we can see different visualizations based on the gathered information. The sources from which the data was obtained can be found in the [Data Sources](https://mazuckerberg.georgetown.domains/DSAN_5600/3_data_sources.html) section. The collected data was analyzed and data cleaning steps were applied. Above each visualization, the code for the data cleaning and the visualization building steps is available.\n\n:::\n\nBelow are the libraries used in this section:\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Libraries\"\n#| results: 'hide'\n#| warning: false\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(forecast)\nlibrary(astsa) \nlibrary(xts)\nlibrary(tseries)\nlibrary(fpp2)\nlibrary(fma)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(TSstudio)\nlibrary(quantmod)\nlibrary(tidyquant)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(readxl)\n```\n\n### Global Oil Production\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| results: 'hide'\n#| warning: false\n\n# Import dataset\ndf_oil_production <- read_csv('./data/oil-production-by-country.csv')\n\n# Rename the columns of the dataframe\nnames(df_oil_production) <- c('Country', 'Code', 'Year', 'Oil_production_TWh')\n\n# Calculate the total oil production by countries for 2022.\ntop_countries <- df_oil_production %>% \n    filter(Year == 2022 & str_length(Code) == 3) %>% \n    group_by(Country) %>%\n    summarize(total_production = sum(Oil_production_TWh)) \n\n# Keep the top 10 countries with higher oil production for 2022\ntop_countries <- top_countries %>% \n    arrange(desc(total_production)) %>%  \n    head(15)\n\n# Filter dataframe by the top 10 oil producing countries\ndf_oil_production <- df_oil_production %>% \n    filter(Country %in% top_countries$Country)\n\n# Save dataframe as a new file\nwrite.csv(df_oil_production, './data/viz_oil_production.csv', row.names = FALSE)\n```\n\n``` {=html}\n<div class='tableauPlaceholder' id='viz1696390734248' style='position: relative'><noscript><a href='#'><img alt='Oil Production (TWh) Map by Year ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Oi&#47;OilProductionTWhMapbyYear&#47;OilProductionMapAnimation&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='OilProductionTWhMapbyYear&#47;OilProductionMapAnimation' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Oi&#47;OilProductionTWhMapbyYear&#47;OilProductionMapAnimation&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-GB' /><param name='filter' value='publish=yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1696390734248');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>\n```\n\n::: {.epigrafe}\nThe above plot is an animation created using Tableau software. The data in this visualization consists of the top 15 oil-producing countries for the year 2022. As the years progress, the colors of the countries change based on each country's production values. The selected time period is from 2000 to 2022.\n\nBased on the information from the visualization, from the year 2000 to 2011, the countries with less oil production were Kazakhstan and Qatar. On the other hand, the top 2 oil-producing countries were Saudi Arabia and Russia.\n\nFrom the year 2011 to 2014, the United States had a significant increase in oil-production, making it really close to Saudi Arabia and Russia. By the year 2018, it had a production high above the previously mentioned countries making it the top 1. This situation continued until the year 2022. The rest of the countries remain with lower price values.\n:::\n\n### U.S. Oil Production\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Get oil price data from stock market\ndf_oil_production_us <- read_csv('./data/oil_production.csv')\n\n# # Rename Columns\nnames(df_oil_production_us) <- c(\"Data\")\n\n# Filter rows\ndf_oil_production_us <- tail(df_oil_production_us, nrow(df_oil_production_us)-3)\n\n# Separate Columns\ndf_oil_production_us <- df_oil_production_us %>%\n  separate('Data', into = c(\"Date\", \"Production\"), sep = \";\")\n\n# Chage data type\ndf_oil_production_us$Date <- as.Date(df_oil_production_us$Date, format = \"%d/%m/%Y\")\n\n# Change data type\ndf_oil_production_us$Production <- round(as.numeric(df_oil_production_us$Production), 2)\n\n#Save dataframe as a new file \nwrite.csv(df_oil_production_us, './data/viz_us_oil_production.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Chage data type\ndf_oil_production_us <- df_oil_production_us %>% filter(year(Date) >= 2000 & year(Date) <= 2022)\n\n# Create plot\nviz_oil_production <- plot_ly(data = df_oil_production_us, x = df_oil_production_us$Date, y = df_oil_production_us$Production, type = 'bar') %>%\n                layout(\n                  title = 'U.S. Oil Production',\n                  xaxis = list(title = 'Date'),\n                  yaxis = list(title = 'Production (thousand barrels)'),\n                  showlegend = FALSE\n                )\n# Show plot\nggplotly(viz_oil_production)\n```\n\n::: {.epigrafe}\n\nThis project is primarily focused on the United States, and as such we are analyzing its oil production by month for the past 22 years. \n\nFrom the plot, we can see that for the first 11 years, from 2000 to 2011, the monthly oil production was below 6 thousand barrels. There is an upward trend until the middle of 2015, when the production increased almost to 10 thousand barrels per month. For the next year, the production had a slight decrease, but the values were still higher compared to the first years of analysis.\n\nIn the following years, we can see that there was a big increase once again, reaching the 13 thousand barrels production, but due to the COVID pandemic, the production had a great fall, causing the increase trend to slow down.\n:::\n\n\n### Crude Oil Price\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Get oil price data from stock market\ndf_oil_price <- tq_get(\"CL=F\", get = \"stock.prices\", from = \"2000-01-01\", to = \"2022-12-31\")\n\n# Calculate adjusted price\ndf_oil_price$adjusted <- df_oil_price$adjusted/df_oil_price$adjusted[1]\n\n# Create dataframe\ndf_oil_price <- data.frame(df_oil_price,rownames(df_oil_price))\n\n# Save dataframe as a new file \nwrite.csv(df_oil_price, './data/viz_oil_price.csv', row.names = FALSE)\n```\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Create plot\nviz_oil_price <- plot_ly(df_oil_price, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = df_oil_price$date, y = df_oil_price$adjusted, name = 'Price', showlegend = FALSE)%>%\n  layout(title = 'Crude Oil Price by Day',\n         xaxis = list(rangeslider = list(visible = T)))\noptions(warn = -1)\n\n# Set plot layout\nviz_oil_price <- viz_oil_price %>%\n  layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff',\n                      title = 'Index'),\n         plot_bgcolor='#e5ecf6')\n\n# Show plot\nggplotly(viz_oil_price)\n```\n\n::: {.epigrafe}\nFrom 2003 to 2008, oil prices rose, quadrupling and setting numerous records. The 2007 subprime mortgage crisis, triggered by the collapse of the 2006 U.S. housing bubble, led to a severe global liquidity crisis and subsequent economic events, including the January 2008 stock market crisis, the October 2008 global stock market crisis, the international economic downturn, and the Great Recession.\n\nIn 2015, crude oil prices fell due to oversupply relative to global demand, resulting in steadily rising inventories throughout the year.\n\nThe COVID-19 pandemic caused a sharp drop in oil prices due to government-imposed shutdowns, stay-at-home orders, and travel restrictions. An unprecedented event occurred on April 20th, 2020, when oil prices turned negative. In March, an oil price war broke out between Russia and Saudi Arabia due to disagreements over production levels.\n\nBy the early summer of 2020, oil prices rebounded as nations lifted shutdowns, and OPEC agreed to substantial crude oil production cuts. Major central banks stopped raising interest rates, supporting demand. Towards the end of the year, optimism surrounded the planned launch of several COVID-19 vaccines, supporting the market.\n:::\n\n### Inflation Rate\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n \n# Import dataset\ndf_inflation <- read_csv('./data/inflation.csv')\n\n# Filter information to keep United States total inflation rate by moth.\ndf_inflation <- df_inflation %>%\n     filter(LOCATION == \"USA\" & SUBJECT == \"TOT\" & FREQUENCY == \"M\" & MEASURE == \"AGRWTH\")\n\n# Format the Time column\ndf_inflation$TIME <- paste(df_inflation$TIME, \"-01\", sep = \"\")\n\n# Chage data type\ndf_inflation$TIME <- as.Date(df_inflation$TIME)\n\n# Select relevant columns\ndf_inflation <- df_inflation %>% select('TIME', 'Value')\n\n# Save dataframe as a new file\nwrite.csv(df_inflation, './data/viz_inflation.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Filter data\ndf_inflation <- df_inflation %>% filter(TIME >= '2000-01-01' & TIME < '2023-01-01') \n\n# Create plot\nviz_inflation <- plot_ly(data = df_inflation, x = ~TIME, y = ~Value, type = 'bar', \n                marker = list(color = ifelse( grepl(\"^2000-\", df_inflation$TIME) | \n                                              grepl(\"^2007-\", df_inflation$TIME) | \n                                              grepl(\"^2014-\", df_inflation$TIME) | \n                                              grepl(\"^2022-\", df_inflation$TIME), \n                                              \"red\", \n                                      ifelse( grepl(\"^2015-\", df_inflation$TIME) | \n                                              grepl(\"^2008-1\", df_inflation$TIME)| \n                                              grepl(\"^2020-\", df_inflation$TIME), \n                                              \"green\", \n                                              \"lightblue\")))) %>%\n                layout(\n                  title = 'U.S. Inflation Variations by Month',\n                  xaxis = list(title = 'Time'),\n                  yaxis = list(title = 'Rate'),\n                  showlegend = FALSE\n                )\n# Show plot\nggplotly(viz_inflation)\n```\n\n::: {.epigrafe}\nThe bar chart above was created using the Plotly package for R. The data in this visualization consists of the annual percentage change in inflation for the U.S. from the year 2000 to 2022, plotted monthly. To enhance clarity, certain bars in the visualization have been highlighted to make the context explanations below easier to understand.\n\nThe Consumer Price Index (CPI), calculated by the Bureau of Labor Statistics, is a widely used measure of inflation. However, the Federal Reserve prefers the Personal Consumption Expenditures (PCE) index because it provides a clearer picture of inflation trends that are less affected by short-term price changes, such as food and energy. The Fed uses monetary policy to manage inflation over the economic cycles.\n\nIn 2000, there was a business cycle expansion of 4.1%, mainly due to the Tech Bubble burst. In 2001, inflation was 1.60% YOY, peaking in March due to President Bush's tax cut and hitting a trough in November after the 9/11 attacks.\n\nIn 2007, inflation peaked at 4.1% in December in the midst of the banking crisis. In 2008, during the International Financial Crisis, YOY inflation was only 0.1%, coupled with a GDP contraction of -0.1%.\n\nIn 2014 and 2015, annual inflation rates of 0.80% and 0.90% respectively accompanied business cycle expansion and GDP growth. The end of the quantitative easing in 2014 and deflation in oil and gas prices in 2015 were key events.\n\nIn 2020, the COVID-19 pandemic triggered a global economic shutdown, resulting in a 1.4% inflation rate and a -3.4% GDP growth. In 2021, government recovery efforts led to a 5.9% GDP growth and 7% YOY inflation. The Fed responded by raising interest rates,  leading to a high inflation rate of 6.50%, and business activity contraction in 2022. Russia's invasion of Ukraine had a significant impact on the U.S. and global economies.\n:::\n\n\n### Interest Rate\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Import dataset\ndf_interest <- read_excel('./data/interest_rates.xlsx', sheet = \"Annual\", .name_repair = \"unique_quiet\") \n\n# Filter information to keep Central Back Policy Rate.\ndf_interest <- df_interest %>% filter(Indicator == 'Central Bank Policy Rate')\n\n# Convert dataframe from wide to long\ndf_interest <- df_interest %>%\n  gather(key = \"Year\", value = \"Value\", -Indicator, -'...2', -'...3', -Scale)\n\n# Select relevant columns\ndf_interest <- df_interest %>% select('Year', 'Value')\n\n# Change data type\ndf_interest$Value <- round(as.numeric(df_interest$Value), 2)\n\n# Save dataframe as a new file \nwrite.csv(df_interest, './data/viz_interest.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Set color variables for each data point\ncolor_2000 <- 'rgba(222,45,38,0.8)' # red\ncolor_2001 <- 'rgba(204,204,204,1)' # gray\ncolor_2002 <- 'rgba(210,238,130,1)' # green\ncolor_2003 <- 'rgba(210,238,130,1)' # green\ncolor_2004 <- 'rgba(204,204,204,1)' # gray\ncolor_2005 <- 'rgba(222,45,38,0.8)' # red\ncolor_2006 <- 'rgba(222,45,38,0.8)' # red\ncolor_2007 <- 'rgba(222,45,38,0.8)' # red\ncolor_2008 <- 'rgba(210,238,130,1)' # green\ncolor_2009 <- 'rgba(204,204,204,1)' # gray\ncolor_2010 <- 'rgba(204,204,204,1)' # gray\ncolor_2011 <- 'rgba(204,204,204,1)' # gray\ncolor_2012 <- 'rgba(204,204,204,1)' # gray\ncolor_2013 <- 'rgba(204,204,204,1)' # gray\ncolor_2014 <- 'rgba(204,204,204,1)' # gray\ncolor_2015 <- 'rgba(222,45,38,0.8)' # red\ncolor_2016 <- 'rgba(222,45,38,0.8)' # red\ncolor_2017 <- 'rgba(204,204,204,1)' # gray\ncolor_2018 <- 'rgba(204,204,204,1)' # gray\ncolor_2019 <- 'rgba(222,45,38,0.8)' # red\ncolor_2020 <- 'rgba(210,238,130,1)' # green\ncolor_2021 <- 'rgba(204,204,204,1)' # gray\n\n# Create plot\nviz_interest <- plot_ly(df_interest, x = df_interest$Year, y = df_interest$Value, type = 'bar',\n            marker = list(color = c(color_2000, color_2001, color_2002, color_2003, color_2004, \n                                    color_2005, color_2006, color_2007, color_2008, color_2009,\n                                    color_2010, color_2011, color_2012, color_2013, color_2014, \n                                    color_2015, color_2016, color_2017, color_2018, color_2019, \n                                    color_2020, color_2021)),\n            text = df_interest$Value,  \n            textposition = 'outside',\n            textangle = 0)\n\n# Set de layout of the plot\nviz_interest <- viz_interest %>% layout(title = \"Interest Rate by Year\",\n         xaxis = list(title = \"Year\"),\n         yaxis = list(title = \"Rate\"))\n\n# Show plot\nggplotly(viz_interest)\n```\n\n::: {.epigrafe}\nThe bar chart visualization above was created using the Plotly package for R. The data in this graph illustrates the annual interest rates for the U.S. from the year 2000 through 2021. Certain bars in the visualization have been highlighted in color red and green in order to show the different increases and decreases in the interest rates, which are explained below.\n\nIn 2000, after a prolonged period of economic expansion, the US Federal Reserve funds rate was 6.5%. The bursting of the technology bubble and the 9/11 attacks triggered a global economic slowdown. This led to 11 interest rate reductions, bringing it down to 1.75% by the end of the year.\n\nIn 2002-2003, the Fed continued to cut rates due to a weak recovery and low inflation. In 2005-2006, they raised rates 17 times to cool the economy and address the real estate bubble. In 2007-2008, the housing market crisis and rising unemployment prompted the Fed to cut rates from 4.75% to 2%.\n\nBy the end of 2008, during the Great Recession, rates were reduced to a range of 0 to 0.25%, with no inflationary pressures. Quantitative easing was introduced to stimulate the economy.\n\nSeven years later, the Fed cautiously raised rates as the economy recovered, with the first hike coming in December 2015. Economic concerns from China in early 2016 and falling oil prices led to a year-long pause in rate hikes. In 2019, U.S.-China trade tensions prompted three rate cuts in the second half of the year to support the economy.\n\nIn 2020, the COVID-19 pandemic caused massive job losses and an unemployment rate of 14.7%, leading to two emergency rate cuts that returned rates to the 0-0.25% range.\n:::\n\n\n### Food Production\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| results: 'hide'\n#| warning: false\n\n# Set the start and end dates\nstart_date <- \"2000-01-01\"\nend_date <- \"2022-12-31\"\n\n# Define the symbol for \nsymbol <- \"GOAI\"\n\n# Use getSymbols() to fetch the data\ngetSymbols(symbol, from = start_date, to = end_date, src = \"FRED\")\n\n# Access the data as a data frame\ndf_food <- as.data.frame(GOAI)\n\ndf_food <- rownames_to_column(df_food, var = \"DATE\")\n\ndf_food$DATE <- as.Date(df_food$DATE)\n\n# Rename columns\nnames(df_food) <- c(\"DATE\", \"Value\")\n\n# Save dataframe as a new file \nwrite.csv(df_food, './data/viz_food_production.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Create plot\nviz_food <- plot_ly(df_food, x = df_food$DATE, y = df_food$Value, type = 'bar')\n\n# Set de layout of the plot\nviz_food <- viz_food %>% layout(title = \"Food Production by Quarter\",\n         xaxis = list(title = \"Date\"),\n         yaxis = list(title = \"Billions of Dollars\"))\n\n# Show plot\nggplotly(viz_food)\n```\n\n::: {.epigrafe}\n\nAs it was introduced before, the food industry is very important for the analysis of oil production and prices on different industries. Plotting quarterly food production in billions of dollars is helpful in understanding the trend and variation in the data.\n\nPlotting quarterly food production in billions of dollars is helpful in understanding the trend and variation in the data. In this case, we can see a clear upward trend that was directly affected by two events that caused a drop in the following quarters. The first occurred in 2008 due to the financial crisis, where the recovery of production was slower compared to the beginning of 2020, when the COVID pandemic took place. In this second event, the trend increased at a higher rate, reaching values 10 thousand higher compared to the quarters before the pandemic.\n:::\n\n### iShares U.S. Healthcare ETF\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Get oil price data from stock market\ndf_healthcare_index <- tq_get(\"iyh\", get = \"stock.prices\", from = \"2000-01-01\", to = \"2022-12-31\")\n\n# Calculate adjusted price\ndf_healthcare_index$adjusted <- df_healthcare_index$adjusted\n\n# Create dataframe\ndf_healthcare_index <- data.frame(df_healthcare_index,rownames(df_healthcare_index))\n\n# Save dataframe as a new file \nwrite.csv(df_healthcare_index, './data/viz_healthcare_index.csv', row.names = FALSE)\n```\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Create plot\nviz_healthcare_index <- plot_ly(df_healthcare_index, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = df_healthcare_index$date, y = df_healthcare_index$adjusted, name = 'Price', showlegend = FALSE)%>%\n  layout(title = 'Healthcare Index by Day',\n         xaxis = list(rangeslider = list(visible = T)))\noptions(warn = -1)\n\n# Set plot layout\nviz_healthcare_index <- viz_healthcare_index %>%\n  layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff',\n                      title = 'Index'),\n         plot_bgcolor='#e5ecf6')\n\n# Show plot\nggplotly(viz_healthcare_index)\n```\n\n::: {.epigrafe}\n\nThe Healthcare Index allows us to understand the performance, volatility and trends of the major companies in the healthcare industry.\n\nDuring the first 13 years of analysis, we can see that the index is below the value of 2, with very low volatility. In the following 7 years, the performance of the sector improved, reaching values higher than 4. We can clearly see the upward trend along these years. \n\nThe COVID pandemic had a different effect on this sector. In the first few weeks, there was a sharp decline that caused the index to fall to values close to 3. However, the sector's performance improved very quickly as demand for the products increased to levels never seen before. As a result, the index rose to levels above 6. This reflects the dependence of societies on the healthcare sector and the high expectations for the recovery of their lifestyles. Over the next few years, the industry maintained high index scores, but we can see that there was a lot of volatility.\n:::\n\n### Bus Passenger Trips\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Import dataset\ndf_bus_passengers <- read_excel('./data/bus_passengers.xlsx', sheet = \"UPT\", .name_repair = \"unique_quiet\") \n\n# Filter relevant rows\ndf_bus_passengers <- df_bus_passengers %>% filter(df_bus_passengers$'3 Mode' == \"Bus\")\n\n# Convert dataframe from wide to long\ndf_bus_passengers <- df_bus_passengers %>% gather(key = \"Year_Month\", value = \"Value\", -'NTD ID', -'Legacy NTD ID', -'Agency', -'Status', -'Reporter Type', -'UACE CD', -'UZA Name', -'Mode', -'TOS', -'3 Mode')\n\n# Select relevant columns\ndf_bus_passengers <- df_bus_passengers %>% select('3 Mode', 'Year_Month', 'Value')\n\n# Rename columns\nnames(df_bus_passengers) <- c('Type', 'Year_Month', 'Value')\n\n# Filter relevant rows\ndf_bus_passengers <- df_bus_passengers %>%\n  group_by(Type, Year_Month) %>%\n  summarize(Value = sum(Value))\n\n# Change data type\ndf_bus_passengers$Value <- as.integer(df_bus_passengers$Value)\n\n# Separate Year_Month\ndf_bus_passengers <- df_bus_passengers %>%\n  separate('Year_Month', into = c(\"Month\", \"Year\"), sep = \"/\")\n\n# Create DATE column\ndf_bus_passengers <- df_bus_passengers %>%\n  mutate(DATE = make_date(Year, Month, day = 1))\n\n# Select relevant columns\ndf_bus_passengers <- df_bus_passengers %>% select('DATE', 'Value')\n\n# Chage data type\ndf_bus_passengers$DATE <- as.Date(df_bus_passengers$DATE)\n\n# Select relevant columns\ndf_bus_passengers <- df_bus_passengers %>% select(DATE, Value)\n\n# Save dataframe as a new file \nwrite.csv(df_bus_passengers, './data/viz_bus_passengers.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Chage data type\ndf_bus_passengers <- df_bus_passengers %>% filter(year(DATE) <= 2022)\n\n# Create plot\nviz_bus_passengers <- plot_ly(data = df_bus_passengers, x = ~DATE, y = ~Value/1000000, type = 'bar') %>%\n                layout(\n                  title = 'U.S. Bus Passengers',\n                  xaxis = list(title = 'Date'),\n                  yaxis = list(title = 'Passenger Trips (millions)'),\n                  showlegend = FALSE\n                )\n# Show plot\nggplotly(viz_bus_passengers)\n```\n\n::: {.epigrafe}\n\nFrom the perspective of the transportation industry, the first analysis is bus passenger trips by month, nationally.\n\n:::\n\n### Air Carrier Domestic and International\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Import dataset\ndf_air_transport <- read_excel('./data/personal_expenditure_by_industry.xlsx', sheet = \"U20405-M\", .name_repair = \"unique_quiet\") \n\n# Make first row the column headers\nnames(df_air_transport) <- append(c('Line', 'Indicator', 'Code'), as.character(df_air_transport[7, ])[4:ncol(df_air_transport)])\n\n# Filter relevant rows\ndf_air_transport <- df_air_transport %>% filter(Indicator == \"Air transportation (64)\")\n\n# Convert dataframe from wide to long\ndf_air_transport <- df_air_transport %>% gather(key = \"Year-Month\", value = \"Value\", -'Line', -'Indicator', -'Code')\n\n# Change data type\ndf_air_transport$Value <- round(as.numeric(df_air_transport$Value), 2)\n\n# Select relevant columns\ndf_air_transport <- df_air_transport %>% select('Year-Month', 'Value')\n\n# Separate Year-Month\ndf_air_transport <- df_air_transport %>%\n  separate('Year-Month', into = c(\"Year\", \"Month\"), sep = \"M\")\n\n# Create DATE column\ndf_air_transport <- df_air_transport %>%\n  mutate(DATE = make_date(Year, Month, day = 1))\n\n# Select relevant columns\ndf_air_transport <- df_air_transport %>% select('DATE', 'Value')\n\n# Chage data type\ndf_air_transport$DATE <- as.Date(df_air_transport$DATE)\n\n# Save dataframe as a new file \nwrite.csv(df_air_transport, './data/viz_air_transport.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Chage data type\ndf_air_transport <- df_air_transport %>% filter(year(DATE) >= 2000)\n\n# Create plot\nviz_air_transport <- plot_ly(data = df_air_transport, x = ~DATE, y = ~Value, type = 'bar') %>%\n                layout(\n                  title = 'U.S. Air Carrier Domestic and International',\n                  xaxis = list(title = 'Date'),\n                  yaxis = list(title = 'Personal Consumption Expenditures (millions of dollars)'),\n                  showlegend = FALSE\n                )\n# Show plot\nggplotly(viz_air_transport)\n```\n\n::: {.epigrafe}\n\nDescription\n\n:::\n\n### Bikes Personal Expenditure\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Import dataset\ndf_bikes <- read_excel('./data/personal_expenditure_by_industry.xlsx', sheet = \"U20405-M\", .name_repair = \"unique_quiet\")\n\n# Make first row the column headers\nnames(df_bikes) <- append(c('Line', 'Indicator', 'Code'), as.character(df_bikes[7, ])[4:ncol(df_bikes)])\n\n# Filter relevant rows\ndf_bikes <- df_bikes %>% filter(Indicator == \"Bicycles and accessories\")\n\n# Convert dataframe from wide to long\ndf_bikes <- df_bikes %>% gather(key = \"Year-Month\", value = \"Value\", -'Line', -'Indicator', -'Code')\n\n# # Change data type\ndf_bikes$Value <- round(as.numeric(df_bikes$Value), 2)\n\n# Select relevant columns\ndf_bikes <- df_bikes %>% select('Year-Month', 'Value')\n\n# Separate Year-Month\ndf_bikes <- df_bikes %>%\n  separate('Year-Month', into = c(\"Year\", \"Month\"), sep = \"M\")\n\n# Create DATE column\ndf_bikes <- df_bikes %>%\n  mutate(DATE = make_date(Year, Month, day = 1))\n\n# Select relevant columns\ndf_bikes <- df_bikes %>% select('DATE', 'Value')\n\n# Chage data type\ndf_bikes$DATE <- as.Date(df_bikes$DATE)\n\n# Save dataframe as a new file \nwrite.csv(df_bikes, './data/viz_bikes.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\n# Chage data type\ndf_bikes <- df_bikes %>% filter(year(DATE) >= 2000)\n\n# Create plot\nviz_bikes <- plot_ly(data = df_bikes, x = ~DATE, y = ~Value, type = 'bar') %>%\n                layout(\n                  title = 'U.S. Bicycles and accessories',\n                  xaxis = list(title = 'Date'),\n                  yaxis = list(title = 'Personal Consumption Expenditures (millions of dollars)'),\n                  showlegend = FALSE\n                )\n# Show plot\nggplotly(viz_bikes)\n```\n\n::: {.epigrafe}\n\nDescription\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"4_data_visualization.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"minty","title":"Data Visualization"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}