{"title":"Data Visualization","markdown":{"yaml":{"title":"Data Visualization"},"headingText":"[Global Oil Production](https://ourworldindata.org/grapher/oil-production-by-country?time=earliest..1923)","containsRefs":false,"markdown":"\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Libraries\"\n#| results: 'hide'\n#| warning: false\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(forecast)\nlibrary(astsa) \nlibrary(xts)\nlibrary(tseries)\nlibrary(fpp2)\nlibrary(fma)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(TSstudio)\nlibrary(quantmod)\nlibrary(tidyquant)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(readxl)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| results: 'hide'\n#| warning: false\n\n# Import dataset\ndf_oil_production <- read_csv('./data/oil-production-by-country.csv')\n\n# Rename the columns of the dataframe\nnames(df_oil_production) <- c('Country', 'Code', 'Year', 'Oil_production_TWh')\n\n# Calculate the total oil production by countries for 2022.\ntop_countries <- df_oil_production %>% \n    filter(Year == 2022 & str_length(Code) == 3) %>% \n    group_by(Country) %>%\n    summarize(total_production = sum(Oil_production_TWh)) \n\n# Keep the top 10 countries with higher oil production for 2022\ntop_countries <- top_countries %>% \n    arrange(desc(total_production)) %>%  \n    head(15)\n\n# Filter dataframe by the top 10 oil producing countries\ndf_oil_production <- df_oil_production %>% \n    filter(Country %in% top_countries$Country)\n\n# Save dataframe as a new file\nwrite.csv(df_oil_production, './data/viz_oil-production-by-country.csv', row.names = FALSE)\n```\n\n``` {=html}\n<div class='tableauPlaceholder' id='viz1696390734248' style='position: relative'><noscript><a href='#'><img alt='Oil Production (TWh) Map by Year ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Oi&#47;OilProductionTWhMapbyYear&#47;OilProductionMapAnimation&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='OilProductionTWhMapbyYear&#47;OilProductionMapAnimation' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Oi&#47;OilProductionTWhMapbyYear&#47;OilProductionMapAnimation&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-GB' /><param name='filter' value='publish=yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1696390734248');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>\n```\n\n#### [U.S. Inflation Rate](https://data.oecd.org/price/inflation-cpi.htm)\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n \n# Import dataset\ndf_inflation <- read_csv('./data/inflation.csv')\n\n# Filter information to keep United States total inflation rate by moth.\ndf_inflation <- df_inflation %>%\n     filter(LOCATION == \"USA\" & SUBJECT == \"TOT\" & FREQUENCY == \"M\" & MEASURE == \"IDX2015\")\n\n# Format the Time column\ndf_inflation$TIME <- paste(df_inflation$TIME, \"-01\", sep = \"\")\n\n# Chage data type\ndf_inflation$TIME <- as.Date(df_inflation$TIME)\n\n# Select relevant columns\ndf_inflation <- df_inflation %>% select('TIME', 'Value')\n\n# Save dataframe as a new file\nwrite.csv(df_inflation, './data/viz_inflation.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\ndf_inflation <- df_inflation %>% filter(TIME >= '2000-01-01' & TIME < '2023-01-01') \n\nplot <- plot_ly(data = df_inflation, x = ~TIME, y = ~Value, type = 'bar') %>%\n  layout(title = 'U.S. Total Inflation by Month',\n         xaxis = list(title = 'Time'),\n         yaxis = list(title = 'Value'),\n         showlegend = FALSE)\n\n# Display the animated chart\nggplotly(plot)\n```\n\n#### [U.S. Interest Rate](https://data.imf.org/regular.aspx?key=61545855)\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Import dataset\ndf_interest <- read_excel('./data/interest_rates.xlsx', sheet = \"Annual\", .name_repair = \"unique_quiet\") \n\n# Filter information to keep Central Back Policy Rate.\ndf_interest <- df_interest %>% filter(Indicator == 'Central Bank Policy Rate')\n\n# Convert dataframe from wide to long\ndf_interest <- df_interest %>%\n  gather(key = \"Year\", value = \"Value\", -Indicator, -'...2', -'...3', -Scale)\n\n# Select relevant columns\ndf_interest <- df_interest %>% select('Year', 'Value')\n\n# Change data type\ndf_interest$Value <- round(as.numeric(df_interest$Value), 2)\n\n# Save dataframe as a new file \nwrite.csv(df_interest, './data/viz_interest.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\ncolor_2000 <- 'rgba(222,45,38,0.8)'\ncolor_2001 <- 'rgba(204,204,204,1)'\ncolor_2002 <- 'rgba(204,204,204,1)'\ncolor_2003 <- 'rgba(204,204,204,1)'\ncolor_2004 <- 'rgba(204,204,204,1)'\ncolor_2005 <- 'rgba(204,204,204,1)'\ncolor_2006 <- 'rgba(204,204,204,1)'\ncolor_2007 <- 'rgba(204,204,204,1)'\ncolor_2008 <- 'rgba(210,238,130,1)'\ncolor_2009 <- 'rgba(204,204,204,1)'\ncolor_2010 <- 'rgba(204,204,204,1)'\ncolor_2011 <- 'rgba(204,204,204,1)'\ncolor_2012 <- 'rgba(204,204,204,1)'\ncolor_2013 <- 'rgba(204,204,204,1)'\ncolor_2014 <- 'rgba(204,204,204,1)'\ncolor_2015 <- 'rgba(204,204,204,1)'\ncolor_2016 <- 'rgba(204,204,204,1)'\ncolor_2017 <- 'rgba(204,204,204,1)'\ncolor_2018 <- 'rgba(204,204,204,1)'\ncolor_2019 <- 'rgba(204,204,204,1)'\ncolor_2020 <- 'rgba(210,238,130,1)'\ncolor_2021 <- 'rgba(204,204,204,1)'\n\ninterest_viz <- plot_ly(df_interest, x = df_interest$Year, y = df_interest$Value, type = 'bar',\n            marker = list(color = c(color_2000, color_2001, color_2002, color_2003, color_2004, \n                                    color_2005, color_2006, color_2007, color_2008, color_2009,\n                                    color_2010, color_2011, color_2012, color_2013, color_2014, \n                                    color_2015, color_2016, color_2017, color_2018, color_2019, \n                                    color_2020, color_2021)),\n            text = df_interest$Value,  \n            textposition = 'outside',\n            textangle = 0)\n\ninterest_viz <- interest_viz %>% layout(title = \"Central Bank Policy Interest Rate by Year\",\n         xaxis = list(title = \"Year\"),\n         yaxis = list(title = \"%\"))\n\nggplotly(interest_viz)\n```\n\n#### [Crude Oil Price](https://finance.yahoo.com/quote/CL%3DF/chart?p=CL%3DF#eyJpbnRlcnZhbCI6IndlZWsiLCJwZXJpb2RpY2l0eSI6MSwiY2FuZGxlV2lkdGgiOjEsImZsaXBwZWQiOmZhbHNlLCJ2b2x1bWVVbmRlcmxheSI6dHJ1ZSwiYWRqIjp0cnVlLCJjcm9zc2hhaXIiOnRydWUsImNoYXJ0VHlwZSI6ImxpbmUiLCJleHRlbmRlZCI6ZmFsc2UsIm1hcmtldFNlc3Npb25zIjp7fSwiYWdncmVnYXRpb25UeXBlIjoib2hsYyIsImNoYXJ0U2NhbGUiOiJsaW5lYXIiLCJwYW5lbHMiOnsiY2hhcnQiOnsicGVyY2VudCI6MSwiZGlzcGxheSI6IkNMPUYiLCJjaGFydE5hbWUiOiJjaGFydCIsImluZGV4IjowLCJ5QXhpcyI6eyJuYW1lIjoiY2hhcnQiLCJwb3NpdGlvbiI6bnVsbH0sInlheGlzTEhTIjpbXSwieWF4aXNSSFMiOlsiY2hhcnQiLCLigIx2b2wgdW5kcuKAjCJdfX0sInNldFNwYW4iOnsiYmFzZSI6ImFsbCIsIm11bHRpcGxpZXIiOjF9LCJsaW5lV2lkdGgiOjIsInN0cmlwZWRCYWNrZ3JvdW5kIjp0cnVlLCJldmVudHMiOnRydWUsImNvbG9yIjoiIzAwODFmMiIsInN0cmlwZWRCYWNrZ3JvdWQiOnRydWUsImV2ZW50TWFwIjp7ImNvcnBvcmF0ZSI6eyJkaXZzIjp0cnVlLCJzcGxpdHMiOnRydWV9LCJzaWdEZXYiOnt9fSwiY3VzdG9tUmFuZ2UiOm51bGwsInN5bWJvbHMiOlt7InN5bWJvbCI6IkNMPUYiLCJzeW1ib2xPYmplY3QiOnsic3ltYm9sIjoiQ0w9RiIsInF1b3RlVHlwZSI6IkZVVFVSRSIsImV4Y2hhbmdlVGltZVpvbmUiOiJBbWVyaWNhL05ld19Zb3JrIn0sInBlcmlvZGljaXR5IjoxLCJpbnRlcnZhbCI6IndlZWsiLCJzZXRTcGFuIjp7ImJhc2UiOiJhbGwiLCJtdWx0aXBsaWVyIjoxfX1dLCJzdHVkaWVzIjp7IuKAjHZvbCB1bmRy4oCMIjp7InR5cGUiOiJ2b2wgdW5kciIsImlucHV0cyI6eyJpZCI6IuKAjHZvbCB1bmRy4oCMIiwiZGlzcGxheSI6IuKAjHZvbCB1bmRy4oCMIn0sIm91dHB1dHMiOnsiVXAgVm9sdW1lIjoiIzAwYjA2MSIsIkRvd24gVm9sdW1lIjoiI2ZmMzMzYSJ9LCJwYW5lbCI6ImNoYXJ0IiwicGFyYW1ldGVycyI6eyJ3aWR0aEZhY3RvciI6MC40NSwiY2hhcnROYW1lIjoiY2hhcnQiLCJwYW5lbE5hbWUiOiJjaGFydCJ9fX19)\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data Hidden\"\n#| warning: false\n\n# oil_price <- tq_get(\"CL=F\", get = \"stock.prices\", from = \"2000-01-01\", to = \"2022-12-31\")\n\n# oil_price_viz <- oil_price %>%\n#     ggplot(aes(x = date, y = adjusted)) +\n#     geom_line(color = palette_light()[[1]]) + \n#     scale_y_continuous() +\n#     labs(title = \"Crude Oil Price\", \n#          subtitle = \"Continuous Scale\", \n#          y = \"Adjusted Price\", x = \"\")\n\n# ggplotly(oil_price_viz)\n```\n\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\noil_price <- tq_get(\"CL=F\", get = \"stock.prices\", from = \"2000-01-01\", to = \"2022-12-31\")\n\noil_price$adjusted <- oil_price$adjusted/oil_price$adjusted[1]\n\noil_price <- data.frame(oil_price,rownames(oil_price))\n\nwrite.csv(oil_price, './data/viz_oil_price.csv', row.names = FALSE)\n```\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\noil_price_viz <- plot_ly(oil_price, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = oil_price$date, y = oil_price$adjusted, name = 'Price', showlegend = FALSE)%>%\n  layout(title = 'Crude Oil Price by Day',\n         xaxis = list(rangeslider = list(visible = T)))\noptions(warn = -1)\n\noil_price_viz <- oil_price_viz %>%\n  layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff',\n                      title = 'Index'),\n         plot_bgcolor='#e5ecf6')\n\nggplotly(oil_price_viz)\n```\n\n\n#### Indexes: [Energy Sector](https://finance.yahoo.com/quote/IYE?p=IYE&.tsrc=fin-srch), [Transportation](https://finance.yahoo.com/quote/IYT?p=IYT&.tsrc=fin-srch) and [Staples](https://finance.yahoo.com/quote/IYK?p=IYK&.tsrc=fin-srch)\n\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\ntickers = c(\"IYE\", \"IYT\", \"IYK\")\n\nfor (i in tickers){\n    getSymbols(i,\n    from = \"2004-01-02\",\n    to = \"2022-12-31\")}\n\nstock <- data.frame(IYE$IYE.Adjusted,\n                    IYT$IYT.Adjusted,\n                    IYK$IYK.Adjusted)\n\nstock$IYE.Adjusted <- stock$IYE.Adjusted/stock$IYE.Adjusted[1]\nstock$IYT.Adjusted <- stock$IYT.Adjusted/stock$IYT.Adjusted[1]\nstock$IYK.Adjusted <- stock$IYK.Adjusted/stock$IYK.Adjusted[1]\n\nstock <- data.frame(stock,rownames(stock))\ncolnames(stock) <- append(tickers,'Dates')\n\nwrite.csv(stock, './data/viz_indexes.csv', row.names = FALSE)\n```\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\nindexes_viz <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = ~Dates, y = ~IYE, name = 'Energy Sector')%>%\n  add_trace(x = ~Dates, y = ~IYT, name = 'Transportation')%>%\n  add_trace(x = ~Dates, y = ~IYK, name = 'Staples')%>%\n  layout(title = 'Energy Sector, Transportation and Staples Indexes by Day', legend=list(title=list(text='Indexes')),\n         xaxis = list(rangeslider = list(visible = T)))\noptions(warn = -1)\nindexes_viz <- indexes_viz %>%\n  layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff',\n                      title = 'Index'),\n         plot_bgcolor='#e5ecf6')\n\nggplotly(indexes_viz)\n```","srcMarkdownNoYaml":"\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Libraries\"\n#| results: 'hide'\n#| warning: false\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(forecast)\nlibrary(astsa) \nlibrary(xts)\nlibrary(tseries)\nlibrary(fpp2)\nlibrary(fma)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(TSstudio)\nlibrary(quantmod)\nlibrary(tidyquant)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(readxl)\n```\n\n#### [Global Oil Production](https://ourworldindata.org/grapher/oil-production-by-country?time=earliest..1923)\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| results: 'hide'\n#| warning: false\n\n# Import dataset\ndf_oil_production <- read_csv('./data/oil-production-by-country.csv')\n\n# Rename the columns of the dataframe\nnames(df_oil_production) <- c('Country', 'Code', 'Year', 'Oil_production_TWh')\n\n# Calculate the total oil production by countries for 2022.\ntop_countries <- df_oil_production %>% \n    filter(Year == 2022 & str_length(Code) == 3) %>% \n    group_by(Country) %>%\n    summarize(total_production = sum(Oil_production_TWh)) \n\n# Keep the top 10 countries with higher oil production for 2022\ntop_countries <- top_countries %>% \n    arrange(desc(total_production)) %>%  \n    head(15)\n\n# Filter dataframe by the top 10 oil producing countries\ndf_oil_production <- df_oil_production %>% \n    filter(Country %in% top_countries$Country)\n\n# Save dataframe as a new file\nwrite.csv(df_oil_production, './data/viz_oil-production-by-country.csv', row.names = FALSE)\n```\n\n``` {=html}\n<div class='tableauPlaceholder' id='viz1696390734248' style='position: relative'><noscript><a href='#'><img alt='Oil Production (TWh) Map by Year ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Oi&#47;OilProductionTWhMapbyYear&#47;OilProductionMapAnimation&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='OilProductionTWhMapbyYear&#47;OilProductionMapAnimation' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Oi&#47;OilProductionTWhMapbyYear&#47;OilProductionMapAnimation&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-GB' /><param name='filter' value='publish=yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1696390734248');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>\n```\n\n#### [U.S. Inflation Rate](https://data.oecd.org/price/inflation-cpi.htm)\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n \n# Import dataset\ndf_inflation <- read_csv('./data/inflation.csv')\n\n# Filter information to keep United States total inflation rate by moth.\ndf_inflation <- df_inflation %>%\n     filter(LOCATION == \"USA\" & SUBJECT == \"TOT\" & FREQUENCY == \"M\" & MEASURE == \"IDX2015\")\n\n# Format the Time column\ndf_inflation$TIME <- paste(df_inflation$TIME, \"-01\", sep = \"\")\n\n# Chage data type\ndf_inflation$TIME <- as.Date(df_inflation$TIME)\n\n# Select relevant columns\ndf_inflation <- df_inflation %>% select('TIME', 'Value')\n\n# Save dataframe as a new file\nwrite.csv(df_inflation, './data/viz_inflation.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\ndf_inflation <- df_inflation %>% filter(TIME >= '2000-01-01' & TIME < '2023-01-01') \n\nplot <- plot_ly(data = df_inflation, x = ~TIME, y = ~Value, type = 'bar') %>%\n  layout(title = 'U.S. Total Inflation by Month',\n         xaxis = list(title = 'Time'),\n         yaxis = list(title = 'Value'),\n         showlegend = FALSE)\n\n# Display the animated chart\nggplotly(plot)\n```\n\n#### [U.S. Interest Rate](https://data.imf.org/regular.aspx?key=61545855)\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\n# Import dataset\ndf_interest <- read_excel('./data/interest_rates.xlsx', sheet = \"Annual\", .name_repair = \"unique_quiet\") \n\n# Filter information to keep Central Back Policy Rate.\ndf_interest <- df_interest %>% filter(Indicator == 'Central Bank Policy Rate')\n\n# Convert dataframe from wide to long\ndf_interest <- df_interest %>%\n  gather(key = \"Year\", value = \"Value\", -Indicator, -'...2', -'...3', -Scale)\n\n# Select relevant columns\ndf_interest <- df_interest %>% select('Year', 'Value')\n\n# Change data type\ndf_interest$Value <- round(as.numeric(df_interest$Value), 2)\n\n# Save dataframe as a new file \nwrite.csv(df_interest, './data/viz_interest.csv', row.names = FALSE)\n```\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\n\ncolor_2000 <- 'rgba(222,45,38,0.8)'\ncolor_2001 <- 'rgba(204,204,204,1)'\ncolor_2002 <- 'rgba(204,204,204,1)'\ncolor_2003 <- 'rgba(204,204,204,1)'\ncolor_2004 <- 'rgba(204,204,204,1)'\ncolor_2005 <- 'rgba(204,204,204,1)'\ncolor_2006 <- 'rgba(204,204,204,1)'\ncolor_2007 <- 'rgba(204,204,204,1)'\ncolor_2008 <- 'rgba(210,238,130,1)'\ncolor_2009 <- 'rgba(204,204,204,1)'\ncolor_2010 <- 'rgba(204,204,204,1)'\ncolor_2011 <- 'rgba(204,204,204,1)'\ncolor_2012 <- 'rgba(204,204,204,1)'\ncolor_2013 <- 'rgba(204,204,204,1)'\ncolor_2014 <- 'rgba(204,204,204,1)'\ncolor_2015 <- 'rgba(204,204,204,1)'\ncolor_2016 <- 'rgba(204,204,204,1)'\ncolor_2017 <- 'rgba(204,204,204,1)'\ncolor_2018 <- 'rgba(204,204,204,1)'\ncolor_2019 <- 'rgba(204,204,204,1)'\ncolor_2020 <- 'rgba(210,238,130,1)'\ncolor_2021 <- 'rgba(204,204,204,1)'\n\ninterest_viz <- plot_ly(df_interest, x = df_interest$Year, y = df_interest$Value, type = 'bar',\n            marker = list(color = c(color_2000, color_2001, color_2002, color_2003, color_2004, \n                                    color_2005, color_2006, color_2007, color_2008, color_2009,\n                                    color_2010, color_2011, color_2012, color_2013, color_2014, \n                                    color_2015, color_2016, color_2017, color_2018, color_2019, \n                                    color_2020, color_2021)),\n            text = df_interest$Value,  \n            textposition = 'outside',\n            textangle = 0)\n\ninterest_viz <- interest_viz %>% layout(title = \"Central Bank Policy Interest Rate by Year\",\n         xaxis = list(title = \"Year\"),\n         yaxis = list(title = \"%\"))\n\nggplotly(interest_viz)\n```\n\n#### [Crude Oil Price](https://finance.yahoo.com/quote/CL%3DF/chart?p=CL%3DF#eyJpbnRlcnZhbCI6IndlZWsiLCJwZXJpb2RpY2l0eSI6MSwiY2FuZGxlV2lkdGgiOjEsImZsaXBwZWQiOmZhbHNlLCJ2b2x1bWVVbmRlcmxheSI6dHJ1ZSwiYWRqIjp0cnVlLCJjcm9zc2hhaXIiOnRydWUsImNoYXJ0VHlwZSI6ImxpbmUiLCJleHRlbmRlZCI6ZmFsc2UsIm1hcmtldFNlc3Npb25zIjp7fSwiYWdncmVnYXRpb25UeXBlIjoib2hsYyIsImNoYXJ0U2NhbGUiOiJsaW5lYXIiLCJwYW5lbHMiOnsiY2hhcnQiOnsicGVyY2VudCI6MSwiZGlzcGxheSI6IkNMPUYiLCJjaGFydE5hbWUiOiJjaGFydCIsImluZGV4IjowLCJ5QXhpcyI6eyJuYW1lIjoiY2hhcnQiLCJwb3NpdGlvbiI6bnVsbH0sInlheGlzTEhTIjpbXSwieWF4aXNSSFMiOlsiY2hhcnQiLCLigIx2b2wgdW5kcuKAjCJdfX0sInNldFNwYW4iOnsiYmFzZSI6ImFsbCIsIm11bHRpcGxpZXIiOjF9LCJsaW5lV2lkdGgiOjIsInN0cmlwZWRCYWNrZ3JvdW5kIjp0cnVlLCJldmVudHMiOnRydWUsImNvbG9yIjoiIzAwODFmMiIsInN0cmlwZWRCYWNrZ3JvdWQiOnRydWUsImV2ZW50TWFwIjp7ImNvcnBvcmF0ZSI6eyJkaXZzIjp0cnVlLCJzcGxpdHMiOnRydWV9LCJzaWdEZXYiOnt9fSwiY3VzdG9tUmFuZ2UiOm51bGwsInN5bWJvbHMiOlt7InN5bWJvbCI6IkNMPUYiLCJzeW1ib2xPYmplY3QiOnsic3ltYm9sIjoiQ0w9RiIsInF1b3RlVHlwZSI6IkZVVFVSRSIsImV4Y2hhbmdlVGltZVpvbmUiOiJBbWVyaWNhL05ld19Zb3JrIn0sInBlcmlvZGljaXR5IjoxLCJpbnRlcnZhbCI6IndlZWsiLCJzZXRTcGFuIjp7ImJhc2UiOiJhbGwiLCJtdWx0aXBsaWVyIjoxfX1dLCJzdHVkaWVzIjp7IuKAjHZvbCB1bmRy4oCMIjp7InR5cGUiOiJ2b2wgdW5kciIsImlucHV0cyI6eyJpZCI6IuKAjHZvbCB1bmRy4oCMIiwiZGlzcGxheSI6IuKAjHZvbCB1bmRy4oCMIn0sIm91dHB1dHMiOnsiVXAgVm9sdW1lIjoiIzAwYjA2MSIsIkRvd24gVm9sdW1lIjoiI2ZmMzMzYSJ9LCJwYW5lbCI6ImNoYXJ0IiwicGFyYW1ldGVycyI6eyJ3aWR0aEZhY3RvciI6MC40NSwiY2hhcnROYW1lIjoiY2hhcnQiLCJwYW5lbE5hbWUiOiJjaGFydCJ9fX19)\n\n``` {r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data Hidden\"\n#| warning: false\n\n# oil_price <- tq_get(\"CL=F\", get = \"stock.prices\", from = \"2000-01-01\", to = \"2022-12-31\")\n\n# oil_price_viz <- oil_price %>%\n#     ggplot(aes(x = date, y = adjusted)) +\n#     geom_line(color = palette_light()[[1]]) + \n#     scale_y_continuous() +\n#     labs(title = \"Crude Oil Price\", \n#          subtitle = \"Continuous Scale\", \n#          y = \"Adjusted Price\", x = \"\")\n\n# ggplotly(oil_price_viz)\n```\n\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\noil_price <- tq_get(\"CL=F\", get = \"stock.prices\", from = \"2000-01-01\", to = \"2022-12-31\")\n\noil_price$adjusted <- oil_price$adjusted/oil_price$adjusted[1]\n\noil_price <- data.frame(oil_price,rownames(oil_price))\n\nwrite.csv(oil_price, './data/viz_oil_price.csv', row.names = FALSE)\n```\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\noil_price_viz <- plot_ly(oil_price, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = oil_price$date, y = oil_price$adjusted, name = 'Price', showlegend = FALSE)%>%\n  layout(title = 'Crude Oil Price by Day',\n         xaxis = list(rangeslider = list(visible = T)))\noptions(warn = -1)\n\noil_price_viz <- oil_price_viz %>%\n  layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff',\n                      title = 'Index'),\n         plot_bgcolor='#e5ecf6')\n\nggplotly(oil_price_viz)\n```\n\n\n#### Indexes: [Energy Sector](https://finance.yahoo.com/quote/IYE?p=IYE&.tsrc=fin-srch), [Transportation](https://finance.yahoo.com/quote/IYT?p=IYT&.tsrc=fin-srch) and [Staples](https://finance.yahoo.com/quote/IYK?p=IYK&.tsrc=fin-srch)\n\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Data\"\n#| warning: false\n\ntickers = c(\"IYE\", \"IYT\", \"IYK\")\n\nfor (i in tickers){\n    getSymbols(i,\n    from = \"2004-01-02\",\n    to = \"2022-12-31\")}\n\nstock <- data.frame(IYE$IYE.Adjusted,\n                    IYT$IYT.Adjusted,\n                    IYK$IYK.Adjusted)\n\nstock$IYE.Adjusted <- stock$IYE.Adjusted/stock$IYE.Adjusted[1]\nstock$IYT.Adjusted <- stock$IYT.Adjusted/stock$IYT.Adjusted[1]\nstock$IYK.Adjusted <- stock$IYK.Adjusted/stock$IYK.Adjusted[1]\n\nstock <- data.frame(stock,rownames(stock))\ncolnames(stock) <- append(tickers,'Dates')\n\nwrite.csv(stock, './data/viz_indexes.csv', row.names = FALSE)\n```\n\n```{r}\n#| echo: true\n#| message: false\n#| code-fold: true\n#| code-summary: \"Visualization\"\n#| warning: false\nindexes_viz <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = ~Dates, y = ~IYE, name = 'Energy Sector')%>%\n  add_trace(x = ~Dates, y = ~IYT, name = 'Transportation')%>%\n  add_trace(x = ~Dates, y = ~IYK, name = 'Staples')%>%\n  layout(title = 'Energy Sector, Transportation and Staples Indexes by Day', legend=list(title=list(text='Indexes')),\n         xaxis = list(rangeslider = list(visible = T)))\noptions(warn = -1)\nindexes_viz <- indexes_viz %>%\n  layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff',\n                      title = 'Index'),\n         plot_bgcolor='#e5ecf6')\n\nggplotly(indexes_viz)\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"4_data_visualization.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"minty","title":"Data Visualization"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}