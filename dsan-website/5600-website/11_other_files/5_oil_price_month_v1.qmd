---
title: "Crude Oil Price by Month"
format: html
---
```{css, echo = FALSE}
.justify {
    text-align: justify !important;
    text-indent: 20px; 
}

.epigrafe {
    text-align: justify !important;
    text-indent: 20px; 
    border: 1.5px solid #87c8b5; 
    padding-top: 15px;
    padding-bottom: 5px;
    padding-right: 15px;
    padding-left: 15px;
    font-size: 14px;
    background-color: #f9f9f9; 
    margin: 20px 0px 30px 0px;
}
```

``` {r}
#| echo: false
#| message: false
#| code-fold: true
#| code-summary: "Libraries"
#| results: 'hide'
#| warning: false

library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(gridExtra)
library(readxl)
library(imputeTS)
library(zoo)
library(knitr)
library(kableExtra)
library(patchwork)
```

::: {.epigrafe}

In this section...
:::

::: {.epigrafe}

Below is the time series plot... 
:::

``` {r, fig.width = 8, fig.height = 4}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Time Series Plot Code"
#| warning: false

# Import dataset
df_oil_price <- read_csv('../data/viz_oil_price.csv')

# Select relevant columns
df_oil_price <- df_oil_price %>% select('date', 'adjusted')

# Create a sequence of dates from start_date to end_date
start_date <- as.Date(min(df_oil_price$date))  
end_date <- as.Date(max(df_oil_price$date))    

# Create data range
date_range <- seq(start_date, end_date, by = "1 day")

# Create a dataset with the date range
date_dataset <- data.frame(Date = date_range)

# Merge dataframes
df_oil_price <- merge(df_oil_price, date_dataset, by.x = "date", by.y = "Date", all = TRUE)

# Check for missing values
# is.na(df_oil_price$adjusted)

# Extract rows with missing values
df_na_rows <- df_oil_price[which(rowSums(is.na(df_oil_price)) > 0),]

# Extract columns with missing values
df_na_cols <- df_oil_price[, which(colSums(is.na(df_oil_price)) > 0)]

# Modify data
imputed_time_series <- na_ma(df_oil_price, k = 4, weighting = "exponential")

# Add modified data
df_oil_price <- data.frame(imputed_time_series)

# Change data type
df_oil_price$date <- as.Date(df_oil_price$date,format = "%m/%d/%y")

# Create Date separte terms columns
df_oil_price_monthly <- df_oil_price %>%
  mutate(Year = lubridate::year(date),
         Month = lubridate::month(date),
         Day = lubridate::day(date))

# Group by Year Month and get the maximum day
df_oil_price_monthly <- df_oil_price_monthly %>%
  group_by(Year, Month) %>%
  summarize(Max_Day = max(Day))

# Create Date
df_oil_price_monthly <- df_oil_price_monthly %>%
  mutate(date = make_date(Year, Month, Max_Day))

# Merge datasets
df_oil_price_monthly <- merge(df_oil_price_monthly, df_oil_price, by = "date", all.x = TRUE)

# Keep relevant columns
df_oil_price_monthly <-  df_oil_price_monthly %>% select("date", "adjusted")

# Create time series
ts_oil_price <- ts(df_oil_price_monthly$adjusted,star=decimal_date(as.Date("2000-08-31",format = "%Y-%m-%d")),frequency = 12)

ggplot(df_oil_price_monthly, aes(x = date, y = adjusted)) +
  geom_line() + # Use geom_line() for a time series plot
  labs(
    title = "Time Series Plot for Oil Price Monthly",
    x = "Years",
    y = "Price"
  )
```

``` {r}
#| echo: false
#| message: false
#| warning: false

# Save ts as a new file
write.csv(df_oil_price_monthly, '../data/df_oil_price_monthly.csv', row.names = FALSE)

# Create df for Pre-Covid Analysis
df_oil_price_monthly_PC <- df_oil_price_monthly %>% filter(year(date) < 2020)

# Save ts as a new file
write.csv(df_oil_price_monthly_PC, '../data/df_oil_price_monthly_PC.csv', row.names = FALSE)
```

::: {.epigrafe}
Applying moving average smoothing ...
:::

``` {r, fig.width = 8, fig.height = 8}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Moving Average smoothing"
#| warning: false

# List of dates
date_seq <- seq(as.Date("2000-08-31"), length.out = length(ts_oil_price), by = "month")

# Moving Average Smoothing - small number
mas_1_oil_price <- ma(ts_oil_price, order = 12)

# Moving Average Smoothing - medium number
mas_2_oil_price <- ma(ts_oil_price, order = 24)

# Moving Average Smoothing - high number
mas_3_oil_price <- ma(ts_oil_price, order = 60)

# Plot the Time Series and the Moving Average Smoothing curves
mas_1_plot <- ggplot() +
              geom_line(aes(x = date_seq, y = ts_oil_price, color = "Original"), size = 1) +
              geom_line(aes(x = date_seq, y = mas_1_oil_price, color = "90-Period"), size = 1) +
              scale_color_manual(values = c("Oil Price" = "black", "90-Period" = "#2ECC71")) +
              labs(title = "Oil Price and Moving Average Smoothing", x = "Years", y = "Price")

# Plot the Time Series and the Moving Average Smoothing curves
mas_2_plot <- ggplot() +
              geom_line(aes(x = date_seq, y = ts_oil_price, color = "Original"), size = 1) +
              geom_line(aes(x = date_seq, y = mas_2_oil_price, color = "180-Period"), size = 1) +
              scale_color_manual(values = c("Oil Price" = "black", "180-Period" = "#3498DB")) +
              labs(title = "Oil Price and Moving Average Smoothing", x = "Years", y = "Price", ) 

# Plot the Time Series and the Moving Average Smoothing curves
mas_3_plot <- ggplot() +
              geom_line(aes(x = date_seq, y = ts_oil_price, color = "Original"), size = 1) +
              geom_line(aes(x = date_seq, y = mas_3_oil_price, color = "365-Period"), size = 1) +
              scale_color_manual(values = c("Oil Price" = "black", "365-Period" = "#E74C3C")) +
              labs(title = "Oil Price and Moving Average Smoothing", x = "Years", y = "Price") 

# Arrange Plots
# grid.arrange(mas_1_plot, mas_2_plot, mas_3_plot, nrow=3)

# Path to save plot
file_path <- "../images/5_oil_price_month.png"

# Plot
plot <- grid.arrange(mas_1_plot, mas_2_plot, mas_3_plot, nrow=3)

# Use ggsave to save the plot as a PNG image
ggsave(plot, filename = file_path, width = 10, height = 8)

# Show plot
plot
```

::: {.epigrafe}

...
:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Lag Plot Code"
#| warning: false

# Lag Plot
gglagplot(ts_oil_price, do.lines=FALSE)+ggtitle("Lag Plot for Oil Price Monthly")
```

::: {.epigrafe}
...
:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "ACF and PACF Plot Code"
#| warning: false

# ACF Plot
acf_oil_price <- ggAcf(ts_oil_price, 50, main="ACF Plot for Oil Price")

# PACF Plot
pacf_oil_price <-ggPacf(ts_oil_price, 50, main="PACF Plot for Oil Price")

# Arrange Plots
grid.arrange(acf_oil_price, pacf_oil_price, nrow=2)
```

::: {.epigrafe}

...
:::

``` {r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Augmented Dickey-Fuller Test Code"
#| warning: false

# Augmented Dickey-Fuller Test calculation
test_oil_price <- adf.test(ts_oil_price)

# Print results
print(test_oil_price)
```

::: {.epigrafe}

...
:::

``` {r, fig.width = 8, fig.height = 8}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Detrending and Differencing Code"
#| warning: false

# Create fit data
fit_oil_price <- lm(ts_oil_price~time(ts_oil_price), na.action=NULL) 

# ACF Detrended Plot
acf_2_oil_price <- ggAcf(resid(fit_oil_price), 50, main="ACF Plot for Oil Price Detrended")

# ACF Differenced Plot
acf_3_oil_price <- ggAcf(diff(ts_oil_price), 50, main="ACF Plot for Oil Price First Differenced")

# Arrange Plots
grid.arrange(acf_oil_price, acf_2_oil_price, acf_3_oil_price, nrow=3)
```

::: {.epigrafe}

...
:::

``` {r}
#| echo: false
#| message: false
#| warning: false

# Save ts as a new file
write.csv(ts_oil_price, '../data/ts_oil_price_monthly.csv', row.names = FALSE)
```

